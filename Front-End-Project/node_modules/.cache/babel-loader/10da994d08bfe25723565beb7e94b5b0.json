{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _get = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decorateMethod = decorateMethod;\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _base = _interopRequireDefault(require(\"../base\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction decorateMethod(method) {\n  return method;\n}\n/**\n * # @polkadot/api/rx\n *\n *  ## Overview\n *\n * @name ApiRx\n *\n * @description\n * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.\n *\n * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.\n *\n * @see [[ApiPromise]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiRx from '@polkadot/api/rx';\n *\n * // initialize via Promise & static create\n * const api = await ApiRx.create().toPromise();\n *\n * // make a call to retrieve the current network head\n * api.rpc.chain.subscribeNewHeads().subscribe((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { combineLatest } from 'rxjs';\n * import { pairwise, switchMap } from 'rxjs/operators';\n * import { ApiRx, WsProvider } from '@polkadot/api';\n *\n *\n * // initialize a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialize via isReady & new with specific provider\n * new ApiRx({ provider })\n *   .isReady\n *   .pipe(\n *     switchMap((api) =>\n *       combineLatest([\n *         api.query.timestamp.blockPeriod(),\n *         api.query.timestamp.now().pipe(pairwise())\n *       ])\n *     )\n *   )\n *   .subscribe(([blockPeriod, timestamp]) => {\n *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();\n *      console.log(`timestamp ${timestamp[1]} \\nelapsed ${elapsed} \\n(${blockPeriod}s target)`);\n *   });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import { first, switchMap } from 'rxjs/operators';\n * import ApiRx from '@polkadot/api/rx';\n *\n * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\n * import testingPairs from '@polkadot/keyring/testingPairs';\n * const keyring = testingPairs();\n *\n * // get api via Promise\n * const api = await ApiRx.create().toPromise();\n *\n * // retrieve nonce for the account\n * api.query.system\n *   .account(keyring.alice.address)\n *   .pipe(\n *      first(),\n *      // pipe nonce into transfer\n *      switchMap(([nonce]) =>\n *        api.tx.balances\n *          // create transfer\n *          .transfer(keyring.bob.address, 12345)\n *          // sign the transaction\n *          .sign(keyring.alice, { nonce })\n *          // send the transaction\n *          .send()\n *      )\n *   )\n *   // subscribe to overall result\n *   .subscribe(({ status }) => {\n *     if (status.isInBlock) {\n *       console.log('Completed at block hash', status.asFinalized.toHex());\n *     }\n *   });\n * ```\n */\n\n\nvar _isReadyRx = (0, _classPrivateFieldLooseKey2.default)(\"isReadyRx\");\n\nvar ApiRx = /*#__PURE__*/function (_base$default) {\n  _inherits(ApiRx, _base$default);\n\n  var _super = _createSuper(ApiRx);\n\n  _createClass(ApiRx, null, [{\n    key: \"create\",\n\n    /**\n     * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.\n     * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * import { switchMap } from 'rxjs/operators';\n     * import Api from '@polkadot/api/rx';\n     *\n     * Api.create()\n     *   .pipe(\n     *     switchMap((api) =>\n     *       api.rpc.chain.subscribeNewHeads()\n     *   ))\n     *   .subscribe((header) => {\n     *     console.log(`new block #${header.number.toNumber()}`);\n     *   });\n     * ```\n     */\n    value: function create(options) {\n      return new ApiRx(options).isReady;\n    }\n    /**\n     * @description Create an instance of the ApiRx class\n     * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * import { switchMap } from 'rxjs/operators';\n     * import Api from '@polkadot/api/rx';\n     *\n     * new Api().isReady\n     *   .pipe(\n     *     switchMap((api) =>\n     *       api.rpc.chain.subscribeNewHeads()\n     *   ))\n     *   .subscribe((header) => {\n     *     console.log(`new block #${header.number.toNumber()}`);\n     *   });\n     * ```\n     */\n\n  }]);\n\n  function ApiRx(options) {\n    var _thisSuper, _this;\n\n    _classCallCheck(this, ApiRx);\n\n    _this = _super.call(this, options, 'rxjs', decorateMethod);\n    Object.defineProperty(_assertThisInitialized(_this), _isReadyRx, {\n      writable: true,\n      value: void 0\n    });\n    (0, _classPrivateFieldLooseBase2.default)(_assertThisInitialized(_this), _isReadyRx)[_isReadyRx] = (0, _rxjs.from)( // You can create an observable from an event, however my mind groks this form better\n    new Promise(function (resolve) {\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(ApiRx.prototype)), \"on\", _thisSuper).call(_thisSuper, 'ready', function () {\n        resolve(_assertThisInitialized(_this));\n      });\n    }));\n    return _this;\n  }\n  /**\n   * @description Observable that returns the first time we are connected and loaded\n   */\n\n\n  _createClass(ApiRx, [{\n    key: \"clone\",\n\n    /**\n     * @description Returns a clone of this ApiRx instance (new underlying provider connection)\n     */\n    value: function clone() {\n      return new ApiRx(_objectSpread(_objectSpread({}, this._options), {}, {\n        source: this\n      }));\n    }\n  }, {\n    key: \"isReady\",\n    get: function get() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyRx)[_isReadyRx];\n    }\n  }]);\n\n  return ApiRx;\n}(_base.default);\n\nexports.default = ApiRx;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api/rx/Api.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","decorateMethod","default","_defineProperty2","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_rxjs","_base","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","method","_isReadyRx","ApiRx","options","isReady","writable","from","Promise","resolve","_options"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AACAF,OAAO,CAACG,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,gBAAgB,GAAGR,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIQ,4BAA4B,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mDAAD,CAAR,CAAzD;;AAEA,IAAIS,2BAA2B,GAAGV,sBAAsB,CAACC,OAAO,CAAC,kDAAD,CAAR,CAAxD;;AAEA,IAAIU,KAAK,GAAGV,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIW,KAAK,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAlC;;AAEA,SAASY,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGd,MAAM,CAACc,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIZ,MAAM,CAACe,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGhB,MAAM,CAACe,qBAAP,CAA6BH,MAA7B,CAAd;AAAoD,QAAIC,cAAJ,EAAoBG,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOlB,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAV;AAA8GN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBE,OAAtB;AAAiC;;AAAC,SAAOF,IAAP;AAAc;;AAErV,SAASS,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEd,MAAAA,OAAO,CAACX,MAAM,CAAC4B,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAE,SAAC,GAAGxB,gBAAgB,CAACD,OAArB,EAA8BmB,MAA9B,EAAsCM,GAAtC,EAA2CF,MAAM,CAACE,GAAD,CAAjD;AAA0D,OAAjH;AAAqH,KAAlI,MAAwI,IAAI9B,MAAM,CAAC+B,yBAAX,EAAsC;AAAE/B,MAAAA,MAAM,CAACgC,gBAAP,CAAwBR,MAAxB,EAAgCxB,MAAM,CAAC+B,yBAAP,CAAiCH,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAEjB,MAAAA,OAAO,CAACX,MAAM,CAAC4B,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAE9B,QAAAA,MAAM,CAACC,cAAP,CAAsBuB,MAAtB,EAA8BM,GAA9B,EAAmC9B,MAAM,CAACmB,wBAAP,CAAgCS,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAON,MAAP;AAAgB;;AAEpiB,SAASpB,cAAT,CAAwB6B,MAAxB,EAAgC;AAC9B,SAAOA,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,UAAU,GAAG,CAAC,GAAG1B,2BAA2B,CAACH,OAAhC,EAAyC,WAAzC,CAAjB;;IAEM8B,K;;;;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;2BACgBC,O,EAAS;AACrB,aAAO,IAAID,KAAJ,CAAUC,OAAV,EAAmBC,OAA1B;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGE,iBAAYD,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN,EAAe,MAAf,EAAuBhC,cAAvB;AACAJ,IAAAA,MAAM,CAACC,cAAP,gCAA4BiC,UAA5B,EAAwC;AACtCI,MAAAA,QAAQ,EAAE,IAD4B;AAEtCnC,MAAAA,KAAK,EAAE,KAAK;AAF0B,KAAxC;AAIA,KAAC,GAAGI,4BAA4B,CAACF,OAAjC,iCAAgD6B,UAAhD,EAA4DA,UAA5D,IAA0E,CAAC,GAAGzB,KAAK,CAAC8B,IAAV,GAAiB;AAC3F,QAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACrB,8HAAS,OAAT,EAAkB,YAAM;AACtBA,QAAAA,OAAO,+BAAP;AACD,OAFD;AAGD,KAJD,CAD0E,CAA1E;AANmB;AAYpB;AACD;AACF;AACA;;;;;;AAME;AACF;AACA;4BAGU;AACN,aAAO,IAAIN,KAAJ,CAAUZ,aAAa,CAACA,aAAa,CAAC,EAAD,EAAK,KAAKmB,QAAV,CAAd,EAAmC,EAAnC,EAAuC;AACnEd,QAAAA,MAAM,EAAE;AAD2D,OAAvC,CAAvB,CAAP;AAGD;;;wBAZa;AACZ,aAAO,CAAC,GAAGrB,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgD6B,UAAhD,EAA4DA,UAA5D,CAAP;AACD;;;;EAlEiBxB,KAAK,CAACL,O;;AAgF1BH,OAAO,CAACG,OAAR,GAAkB8B,KAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decorateMethod = decorateMethod;\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _base = _interopRequireDefault(require(\"../base\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction decorateMethod(method) {\n  return method;\n}\n/**\n * # @polkadot/api/rx\n *\n *  ## Overview\n *\n * @name ApiRx\n *\n * @description\n * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.\n *\n * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.\n *\n * @see [[ApiPromise]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiRx from '@polkadot/api/rx';\n *\n * // initialize via Promise & static create\n * const api = await ApiRx.create().toPromise();\n *\n * // make a call to retrieve the current network head\n * api.rpc.chain.subscribeNewHeads().subscribe((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { combineLatest } from 'rxjs';\n * import { pairwise, switchMap } from 'rxjs/operators';\n * import { ApiRx, WsProvider } from '@polkadot/api';\n *\n *\n * // initialize a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialize via isReady & new with specific provider\n * new ApiRx({ provider })\n *   .isReady\n *   .pipe(\n *     switchMap((api) =>\n *       combineLatest([\n *         api.query.timestamp.blockPeriod(),\n *         api.query.timestamp.now().pipe(pairwise())\n *       ])\n *     )\n *   )\n *   .subscribe(([blockPeriod, timestamp]) => {\n *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();\n *      console.log(`timestamp ${timestamp[1]} \\nelapsed ${elapsed} \\n(${blockPeriod}s target)`);\n *   });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import { first, switchMap } from 'rxjs/operators';\n * import ApiRx from '@polkadot/api/rx';\n *\n * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\n * import testingPairs from '@polkadot/keyring/testingPairs';\n * const keyring = testingPairs();\n *\n * // get api via Promise\n * const api = await ApiRx.create().toPromise();\n *\n * // retrieve nonce for the account\n * api.query.system\n *   .account(keyring.alice.address)\n *   .pipe(\n *      first(),\n *      // pipe nonce into transfer\n *      switchMap(([nonce]) =>\n *        api.tx.balances\n *          // create transfer\n *          .transfer(keyring.bob.address, 12345)\n *          // sign the transaction\n *          .sign(keyring.alice, { nonce })\n *          // send the transaction\n *          .send()\n *      )\n *   )\n *   // subscribe to overall result\n *   .subscribe(({ status }) => {\n *     if (status.isInBlock) {\n *       console.log('Completed at block hash', status.asFinalized.toHex());\n *     }\n *   });\n * ```\n */\n\n\nvar _isReadyRx = (0, _classPrivateFieldLooseKey2.default)(\"isReadyRx\");\n\nclass ApiRx extends _base.default {\n  /**\n   * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.\n   * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import { switchMap } from 'rxjs/operators';\n   * import Api from '@polkadot/api/rx';\n   *\n   * Api.create()\n   *   .pipe(\n   *     switchMap((api) =>\n   *       api.rpc.chain.subscribeNewHeads()\n   *   ))\n   *   .subscribe((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * ```\n   */\n  static create(options) {\n    return new ApiRx(options).isReady;\n  }\n  /**\n   * @description Create an instance of the ApiRx class\n   * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import { switchMap } from 'rxjs/operators';\n   * import Api from '@polkadot/api/rx';\n   *\n   * new Api().isReady\n   *   .pipe(\n   *     switchMap((api) =>\n   *       api.rpc.chain.subscribeNewHeads()\n   *   ))\n   *   .subscribe((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * ```\n   */\n\n\n  constructor(options) {\n    super(options, 'rxjs', decorateMethod);\n    Object.defineProperty(this, _isReadyRx, {\n      writable: true,\n      value: void 0\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyRx)[_isReadyRx] = (0, _rxjs.from)( // You can create an observable from an event, however my mind groks this form better\n    new Promise(resolve => {\n      super.on('ready', () => {\n        resolve(this);\n      });\n    }));\n  }\n  /**\n   * @description Observable that returns the first time we are connected and loaded\n   */\n\n\n  get isReady() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyRx)[_isReadyRx];\n  }\n  /**\n   * @description Returns a clone of this ApiRx instance (new underlying provider connection)\n   */\n\n\n  clone() {\n    return new ApiRx(_objectSpread(_objectSpread({}, this._options), {}, {\n      source: this\n    }));\n  }\n\n}\n\nexports.default = ApiRx;"]},"metadata":{},"sourceType":"script"}