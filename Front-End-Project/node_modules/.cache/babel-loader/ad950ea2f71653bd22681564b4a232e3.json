{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = signatureVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../address/decode\"));\n\nvar _verify = _interopRequireDefault(require(\"../nacl/verify\"));\n\nvar _verify2 = _interopRequireDefault(require(\"../schnorrkel/verify\"));\n\nvar _verify3 = _interopRequireDefault(require(\"../secp256k1/verify\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar VERIFIERS_ECDSA = [['ecdsa', function (message, signature, publicKey, isExpanded) {\n  return (0, _verify3.default)(message, signature, publicKey, 'blake2', isExpanded);\n}], ['ethereum', function (message, signature, publicKey, isExpanded) {\n  return (0, _verify3.default)(message, signature, publicKey, 'keccak', isExpanded);\n}]];\nvar VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default]].concat(VERIFIERS_ECDSA);\nvar CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, message, signature, publicKey, isExpanded) {\n  var verifiers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : VERIFIERS;\n  result.isValid = verifiers.some(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        crypto = _ref2[0],\n        verify = _ref2[1];\n\n    try {\n      if (verify(message, signature, publicKey, isExpanded)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, message, signature, publicKey, isExpanded) {\n  (0, _util.assert)([0, 1, 2].includes(signature[0]), \"Unknown crypto type, expected signature prefix [0..2], found \".concat(signature[0]));\n  var type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: function ecdsa() {\n        return verifyDetect(result, message, signature.subarray(1), publicKey, isExpanded, VERIFIERS_ECDSA).isValid;\n      },\n      ed25519: function ed25519() {\n        return (0, _verify.default)(message, signature.subarray(1), publicKey);\n      },\n      none: function none() {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: function sr25519() {\n        return (0, _verify2.default)(message, signature.subarray(1), publicKey);\n      }\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction signatureVerify(message, signature, addressOrPublicKey, isExpanded) {\n  var signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), \"Invalid signature length, expected [64..66] bytes, found \".concat(signatureU8a.length));\n  var result = {\n    crypto: 'none',\n    isValid: false\n  };\n  var publicKey = (0, _decode.default)(addressOrPublicKey);\n  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, message, signatureU8a, publicKey, isExpanded) : verifyDetect(result, message, signatureU8a, publicKey, isExpanded);\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util-crypto/signature/verify.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","signatureVerify","_util","_decode","_verify","_verify2","_verify3","VERIFIERS_ECDSA","message","signature","publicKey","isExpanded","VERIFIERS","CRYPTO_TYPES","verifyDetect","result","verifiers","isValid","some","crypto","verify","error","verifyMultisig","assert","includes","type","ecdsa","subarray","ed25519","none","Error","sr25519","addressOrPublicKey","signatureU8a","u8aToU8a","length"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = signatureVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../address/decode\"));\n\nvar _verify = _interopRequireDefault(require(\"../nacl/verify\"));\n\nvar _verify2 = _interopRequireDefault(require(\"../schnorrkel/verify\"));\n\nvar _verify3 = _interopRequireDefault(require(\"../secp256k1/verify\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst VERIFIERS_ECDSA = [['ecdsa', (message, signature, publicKey, isExpanded) => (0, _verify3.default)(message, signature, publicKey, 'blake2', isExpanded)], ['ethereum', (message, signature, publicKey, isExpanded) => (0, _verify3.default)(message, signature, publicKey, 'keccak', isExpanded)]];\nconst VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default], ...VERIFIERS_ECDSA];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, message, signature, publicKey, isExpanded, verifiers = VERIFIERS) {\n  result.isValid = verifiers.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey, isExpanded)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, message, signature, publicKey, isExpanded) {\n  (0, _util.assert)([0, 1, 2].includes(signature[0]), `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  const type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: () => verifyDetect(result, message, signature.subarray(1), publicKey, isExpanded, VERIFIERS_ECDSA).isValid,\n      ed25519: () => (0, _verify.default)(message, signature.subarray(1), publicKey),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => (0, _verify2.default)(message, signature.subarray(1), publicKey)\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction signatureVerify(message, signature, addressOrPublicKey, isExpanded) {\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const result = {\n    crypto: 'none',\n    isValid: false\n  };\n  const publicKey = (0, _decode.default)(addressOrPublicKey);\n  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, message, signatureU8a, publicKey, isExpanded) : verifyDetect(result, message, signatureU8a, publicKey, isExpanded);\n}"]},"metadata":{},"sourceType":"script"}