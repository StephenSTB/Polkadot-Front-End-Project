{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.candidates = candidates;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @description Get the candidate info for a society\n */\n\n\nfunction candidates(instanceId, api) {\n  return (0, _util.memo)(instanceId, function () {\n    return api.query.society.candidates().pipe((0, _operators.switchMap)(function (candidates) {\n      return (0, _rxjs.combineLatest)([(0, _rxjs.of)(candidates), api.query.society.suspendedCandidates.multi(candidates.map(function (_ref) {\n        var who = _ref.who;\n        return who;\n      }))]);\n    }), (0, _operators.map)(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          candidates = _ref3[0],\n          suspended = _ref3[1];\n\n      return candidates.map(function (_ref4, index) {\n        var kind = _ref4.kind,\n            value = _ref4.value,\n            who = _ref4.who;\n        return {\n          accountId: who,\n          isSuspended: suspended[index].isSome,\n          kind: kind,\n          value: value\n        };\n      });\n    }));\n  });\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/society/candidates.js"],"names":["Object","defineProperty","exports","value","candidates","_rxjs","require","_operators","_util","instanceId","api","memo","query","society","pipe","switchMap","combineLatest","of","suspendedCandidates","multi","map","who","suspended","index","kind","accountId","isSuspended","isSome"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,UAAR,GAAqBA,UAArB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;AAEA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBK,UAApB,EAAgCC,GAAhC,EAAqC;AACnC,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4B;AAAA,WAAMC,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBT,UAAlB,GAA+BU,IAA/B,CAAoC,CAAC,GAAGP,UAAU,CAACQ,SAAf,EAA0B,UAAAX,UAAU;AAAA,aAAI,CAAC,GAAGC,KAAK,CAACW,aAAV,EAAyB,CAAC,CAAC,GAAGX,KAAK,CAACY,EAAV,EAAcb,UAAd,CAAD,EAA4BM,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBK,mBAAlB,CAAsCC,KAAtC,CAA4Cf,UAAU,CAACgB,GAAX,CAAe;AAAA,YACnOC,GADmO,QACnOA,GADmO;AAAA,eAE/NA,GAF+N;AAAA,OAAf,CAA5C,CAA5B,CAAzB,CAAJ;AAAA,KAApC,CAApC,EAEzB,CAAC,GAAGd,UAAU,CAACa,GAAf,EAAoB;AAAA;AAAA,UAAEhB,UAAF;AAAA,UAAckB,SAAd;;AAAA,aAA6BlB,UAAU,CAACgB,GAAX,CAAe,iBAI7EG,KAJ6E;AAAA,YAC9EC,IAD8E,SAC9EA,IAD8E;AAAA,YAE9ErB,KAF8E,SAE9EA,KAF8E;AAAA,YAG9EkB,GAH8E,SAG9EA,GAH8E;AAAA,eAIlE;AACZI,UAAAA,SAAS,EAAEJ,GADC;AAEZK,UAAAA,WAAW,EAAEJ,SAAS,CAACC,KAAD,CAAT,CAAiBI,MAFlB;AAGZH,UAAAA,IAAI,EAAJA,IAHY;AAIZrB,UAAAA,KAAK,EAALA;AAJY,SAJkE;AAAA,OAAf,CAA7B;AAAA,KAApB,CAFyB,CAAN;AAAA,GAA5B,CAAP;AAYD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.candidates = candidates;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @description Get the candidate info for a society\n */\nfunction candidates(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.query.society.candidates().pipe((0, _operators.switchMap)(candidates => (0, _rxjs.combineLatest)([(0, _rxjs.of)(candidates), api.query.society.suspendedCandidates.multi(candidates.map(({\n    who\n  }) => who))])), (0, _operators.map)(([candidates, suspended]) => candidates.map(({\n    kind,\n    value,\n    who\n  }, index) => ({\n    accountId: who,\n    isSuspended: suspended[index].isSome,\n    kind,\n    value\n  })))));\n}"]},"metadata":{},"sourceType":"script"}