{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _interopRequireWildcard2 = _interopRequireDefault(require(\"@babel/runtime/helpers/interopRequireWildcard\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Init = _interopRequireDefault(require(\"./Init\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar pkgJson = {\n  name: '@polkadot/api',\n  version: '-'\n};\nPromise.resolve().then(function () {\n  return (0, _interopRequireWildcard2.default)(require('../package.json'));\n}).then(function (_pkgJson) {\n  pkgJson = _pkgJson;\n}).catch(function () {// ignore\n});\n\nfunction assertResult(value) {\n  (0, _util.assert)(!(0, _util.isUndefined)(value), 'Api needs to be initialized before using, listen on \\'ready\\'');\n  return value;\n}\n\nvar ApiBase = /*#__PURE__*/function (_Init$default) {\n  _inherits(ApiBase, _Init$default);\n\n  var _super = _createSuper(ApiBase);\n\n  /**\n   * @description Create an instance of the class\n   *\n   * @param options Options object to create API instance or a Provider instance\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * const api = new Api().isReady();\n   *\n   * api.rpc.subscribeNewHeads((header) => {\n   *   console.log(`new block #${header.number.toNumber()}`);\n   * });\n   * ```\n   */\n  function ApiBase() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var type = arguments.length > 1 ? arguments[1] : undefined;\n    var decorateMethod = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, ApiBase);\n\n    return _super.call(this, options, type, decorateMethod);\n  }\n  /**\n   * @description Contains the parameter types (constants) of all modules.\n   *\n   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * console.log(api.consts.democracy.enactmentPeriod.toString())\n   * ```\n   */\n\n\n  _createClass(ApiBase, [{\n    key: \"connect\",\n\n    /**\n     * @description Connect from the underlying provider, halting all network traffic\n     */\n    value: function connect() {\n      return this._rpcCore.connect();\n    }\n    /**\n     * @description Disconnect from the underlying provider, halting all network traffic\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._rpcCore.disconnect();\n    }\n    /**\n     * @description Finds the definition for a specific [[CallFunction]] based on the index supplied\n     */\n\n  }, {\n    key: \"findCall\",\n    value: function findCall(callIndex) {\n      return this.registry.findMetaCall((0, _util.u8aToU8a)(callIndex));\n    }\n    /**\n     * @description Finds the definition for a specific [[RegistryError]] based on the index supplied\n     */\n\n  }, {\n    key: \"findError\",\n    value: function findError(errorIndex) {\n      return this.registry.findMetaError((0, _util.u8aToU8a)(errorIndex));\n    }\n    /**\n     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair\n     */\n\n  }, {\n    key: \"setSigner\",\n    value: function setSigner(signer) {\n      this._rx.signer = signer;\n    }\n    /**\n     * @description Signs a raw signer payload, string or Uint8Array\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address, data) {\n        var _ref,\n            signer,\n            _signer,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 2 && _args[2] !== undefined ? _args[2] : {}, signer = _ref.signer;\n\n                if (!(0, _util.isString)(address)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _signer = signer || this._rx.signer;\n                (0, _util.assert)(_signer === null || _signer === void 0 ? void 0 : _signer.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');\n                _context.next = 6;\n                return _signer.signRaw(_objectSpread(_objectSpread({\n                  type: 'bytes'\n                }, data), {}, {\n                  address: address\n                }));\n\n              case 6:\n                return _context.abrupt(\"return\", _context.sent.signature);\n\n              case 7:\n                return _context.abrupt(\"return\", (0, _util.u8aToHex)(address.sign((0, _util.u8aToU8a)(data.data))));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sign(_x, _x2) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"consts\",\n    get: function get() {\n      return assertResult(this._consts);\n    }\n    /**\n     * @description Derived results that are injected into the API, allowing for combinations of various query results.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.derive.chain.bestNumber((number) => {\n     *   console.log('best number', number);\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"derive\",\n    get: function get() {\n      return assertResult(this._derive);\n    }\n    /**\n     * @description  Returns the version of extrinsics in-use on this chain\n     */\n\n  }, {\n    key: \"extrinsicVersion\",\n    get: function get() {\n      return this._extrinsicType;\n    }\n    /**\n     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.\n     */\n\n  }, {\n    key: \"genesisHash\",\n    get: function get() {\n      return assertResult(this._genesisHash);\n    }\n    /**\n     * @description `true` when subscriptions are supported\n     */\n\n  }, {\n    key: \"hasSubscriptions\",\n    get: function get() {\n      return this._rpcCore.provider.hasSubscriptions;\n    }\n    /**\n     * @description true is the underlying provider is connected\n     */\n\n  }, {\n    key: \"isConnected\",\n    get: function get() {\n      return this._isConnected.getValue();\n    }\n    /**\n     * @description The library information name & version (from package.json)\n     */\n\n  }, {\n    key: \"libraryInfo\",\n    get: function get() {\n      return \"\".concat(pkgJson.name, \" v\").concat(pkgJson.version);\n    }\n    /**\n     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.\n     *\n     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.query.system.account(<accountId>, ([nonce, balance]) => {\n     *   console.log('new free balance', balance.free, 'new nonce', nonce);\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"query\",\n    get: function get() {\n      return assertResult(this._query);\n    }\n    /**\n     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * const unsub = await api.queryMulti(\n     *   [\n     *     // you can include the storage without any parameters\n     *     api.query.balances.totalIssuance,\n     *     // or you can pass parameters to the storage query\n     *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']\n     *   ],\n     *   ([existential, [, { free }]]) => {\n     *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);\n     *\n     *     unsub();\n     *   }\n     * );\n     * ```\n     */\n\n  }, {\n    key: \"queryMulti\",\n    get: function get() {\n      return assertResult(this._queryMulti);\n    }\n    /**\n     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.\n     *\n     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.rpc.chain.subscribeNewHeads((header) => {\n     *   console.log('new header', header);\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"rpc\",\n    get: function get() {\n      return assertResult(this._rpc);\n    }\n    /**\n     * @description Contains the chain information for the current node.\n     */\n\n  }, {\n    key: \"runtimeChain\",\n    get: function get() {\n      return assertResult(this._runtimeChain);\n    }\n    /**\n     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.\n     */\n\n  }, {\n    key: \"runtimeMetadata\",\n    get: function get() {\n      return assertResult(this._runtimeMetadata);\n    }\n    /**\n     * @description Contains the version information for the current runtime.\n     */\n\n  }, {\n    key: \"runtimeVersion\",\n    get: function get() {\n      return assertResult(this._runtimeVersion);\n    }\n    /**\n     * @description The underlying Rx API interface\n     */\n\n  }, {\n    key: \"rx\",\n    get: function get() {\n      return assertResult(this._rx);\n    }\n    /**\n     * @description The type of this API instance, either 'rxjs' or 'promise'\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n    /**\n     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.\n     *\n     * @example\n     * <BR>\n     *\n     * ```javascript\n     * api.tx.balances\n     *   .transfer(<recipientId>, <balance>)\n     *   .signAndSend(<keyPair>, ({status}) => {\n     *     console.log('tx status', status.asFinalized.toHex());\n     *   });\n     * ```\n     */\n\n  }, {\n    key: \"tx\",\n    get: function get() {\n      return assertResult(this._extrinsics);\n    }\n  }]);\n\n  return ApiBase;\n}(_Init.default);\n\nexports.default = ApiBase;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api/base/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_interopRequireWildcard2","_util","_Init","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","pkgJson","name","version","Promise","resolve","then","_pkgJson","catch","assertResult","assert","isUndefined","ApiBase","options","type","decorateMethod","_rpcCore","connect","disconnect","callIndex","registry","findMetaCall","u8aToU8a","errorIndex","findMetaError","signer","_rx","address","data","isString","_signer","signRaw","signature","u8aToHex","sign","_consts","_derive","_extrinsicType","_genesisHash","provider","hasSubscriptions","_isConnected","getValue","_query","_queryMulti","_rpc","_runtimeChain","_runtimeMetadata","_runtimeVersion","_type","_extrinsics"],"mappings":"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CA,IAAzB,CAAb,CAApB,C;;;;;;;;;;;;;;;;;;wBAnPI;AACX,aAAOnB,YAAY,CAAC,KAAK0B,OAAN,CAAnB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBAGe;AACX,aAAO1B,YAAY,CAAC,KAAK2B,OAAN,CAAnB;AACD;AACD;AACF;AACA;;;;wBAGyB;AACrB,aAAO,KAAKC,cAAZ;AACD;AACD;AACF;AACA;;;;wBAGoB;AAChB,aAAO5B,YAAY,CAAC,KAAK6B,YAAN,CAAnB;AACD;AACD;AACF;AACA;;;;wBAGyB;AACrB,aAAO,KAAKtB,QAAL,CAAcuB,QAAd,CAAuBC,gBAA9B;AACD;AACD;AACF;AACA;;;;wBAGoB;AAChB,aAAO,KAAKC,YAAL,CAAkBC,QAAlB,EAAP;AACD;AACD;AACF;AACA;;;;wBAGoB;AAChB,uBAAUzC,OAAO,CAACC,IAAlB,eAA2BD,OAAO,CAACE,OAAnC;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBAGc;AACV,aAAOM,YAAY,CAAC,KAAKkC,MAAN,CAAnB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBAGmB;AACf,aAAOlC,YAAY,CAAC,KAAKmC,WAAN,CAAnB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBAGY;AACR,aAAOnC,YAAY,CAAC,KAAKoC,IAAN,CAAnB;AACD;AACD;AACF;AACA;;;;wBAGqB;AACjB,aAAOpC,YAAY,CAAC,KAAKqC,aAAN,CAAnB;AACD;AACD;AACF;AACA;;;;wBAGwB;AACpB,aAAOrC,YAAY,CAAC,KAAKsC,gBAAN,CAAnB;AACD;AACD;AACF;AACA;;;;wBAGuB;AACnB,aAAOtC,YAAY,CAAC,KAAKuC,eAAN,CAAnB;AACD;AACD;AACF;AACA;;;;wBAGW;AACP,aAAOvC,YAAY,CAAC,KAAKiB,GAAN,CAAnB;AACD;AACD;AACF;AACA;;;;wBAGa;AACT,aAAO,KAAKuB,KAAZ;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBAGW;AACP,aAAOxC,YAAY,CAAC,KAAKyC,WAAN,CAAnB;AACD;;;;EA3NmBxE,KAAK,CAACJ,O;;AA4R5BF,OAAO,CAACE,OAAR,GAAkBsC,OAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _interopRequireWildcard2 = _interopRequireDefault(require(\"@babel/runtime/helpers/interopRequireWildcard\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Init = _interopRequireDefault(require(\"./Init\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nlet pkgJson = {\n  name: '@polkadot/api',\n  version: '-'\n};\nPromise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('../package.json'))).then(_pkgJson => {\n  pkgJson = _pkgJson;\n}).catch(() => {// ignore\n});\n\nfunction assertResult(value) {\n  (0, _util.assert)(!(0, _util.isUndefined)(value), 'Api needs to be initialized before using, listen on \\'ready\\'');\n  return value;\n}\n\nclass ApiBase extends _Init.default {\n  /**\n   * @description Create an instance of the class\n   *\n   * @param options Options object to create API instance or a Provider instance\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import Api from '@polkadot/api/promise';\n   *\n   * const api = new Api().isReady();\n   *\n   * api.rpc.subscribeNewHeads((header) => {\n   *   console.log(`new block #${header.number.toNumber()}`);\n   * });\n   * ```\n   */\n  constructor(options = {}, type, decorateMethod) {\n    super(options, type, decorateMethod);\n  }\n  /**\n   * @description Contains the parameter types (constants) of all modules.\n   *\n   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * console.log(api.consts.democracy.enactmentPeriod.toString())\n   * ```\n   */\n\n\n  get consts() {\n    return assertResult(this._consts);\n  }\n  /**\n   * @description Derived results that are injected into the API, allowing for combinations of various query results.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.derive.chain.bestNumber((number) => {\n   *   console.log('best number', number);\n   * });\n   * ```\n   */\n\n\n  get derive() {\n    return assertResult(this._derive);\n  }\n  /**\n   * @description  Returns the version of extrinsics in-use on this chain\n   */\n\n\n  get extrinsicVersion() {\n    return this._extrinsicType;\n  }\n  /**\n   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.\n   */\n\n\n  get genesisHash() {\n    return assertResult(this._genesisHash);\n  }\n  /**\n   * @description `true` when subscriptions are supported\n   */\n\n\n  get hasSubscriptions() {\n    return this._rpcCore.provider.hasSubscriptions;\n  }\n  /**\n   * @description true is the underlying provider is connected\n   */\n\n\n  get isConnected() {\n    return this._isConnected.getValue();\n  }\n  /**\n   * @description The library information name & version (from package.json)\n   */\n\n\n  get libraryInfo() {\n    return `${pkgJson.name} v${pkgJson.version}`;\n  }\n  /**\n   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.\n   *\n   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.query.system.account(<accountId>, ([nonce, balance]) => {\n   *   console.log('new free balance', balance.free, 'new nonce', nonce);\n   * });\n   * ```\n   */\n\n\n  get query() {\n    return assertResult(this._query);\n  }\n  /**\n   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const unsub = await api.queryMulti(\n   *   [\n   *     // you can include the storage without any parameters\n   *     api.query.balances.totalIssuance,\n   *     // or you can pass parameters to the storage query\n   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']\n   *   ],\n   *   ([existential, [, { free }]]) => {\n   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);\n   *\n   *     unsub();\n   *   }\n   * );\n   * ```\n   */\n\n\n  get queryMulti() {\n    return assertResult(this._queryMulti);\n  }\n  /**\n   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.\n   *\n   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.rpc.chain.subscribeNewHeads((header) => {\n   *   console.log('new header', header);\n   * });\n   * ```\n   */\n\n\n  get rpc() {\n    return assertResult(this._rpc);\n  }\n  /**\n   * @description Contains the chain information for the current node.\n   */\n\n\n  get runtimeChain() {\n    return assertResult(this._runtimeChain);\n  }\n  /**\n   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.\n   */\n\n\n  get runtimeMetadata() {\n    return assertResult(this._runtimeMetadata);\n  }\n  /**\n   * @description Contains the version information for the current runtime.\n   */\n\n\n  get runtimeVersion() {\n    return assertResult(this._runtimeVersion);\n  }\n  /**\n   * @description The underlying Rx API interface\n   */\n\n\n  get rx() {\n    return assertResult(this._rx);\n  }\n  /**\n   * @description The type of this API instance, either 'rxjs' or 'promise'\n   */\n\n\n  get type() {\n    return this._type;\n  }\n  /**\n   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * api.tx.balances\n   *   .transfer(<recipientId>, <balance>)\n   *   .signAndSend(<keyPair>, ({status}) => {\n   *     console.log('tx status', status.asFinalized.toHex());\n   *   });\n   * ```\n   */\n\n\n  get tx() {\n    return assertResult(this._extrinsics);\n  }\n  /**\n   * @description Connect from the underlying provider, halting all network traffic\n   */\n\n\n  connect() {\n    return this._rpcCore.connect();\n  }\n  /**\n   * @description Disconnect from the underlying provider, halting all network traffic\n   */\n\n\n  disconnect() {\n    return this._rpcCore.disconnect();\n  }\n  /**\n   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied\n   */\n\n\n  findCall(callIndex) {\n    return this.registry.findMetaCall((0, _util.u8aToU8a)(callIndex));\n  }\n  /**\n   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied\n   */\n\n\n  findError(errorIndex) {\n    return this.registry.findMetaError((0, _util.u8aToU8a)(errorIndex));\n  }\n  /**\n   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair\n   */\n\n\n  setSigner(signer) {\n    this._rx.signer = signer;\n  }\n  /**\n   * @description Signs a raw signer payload, string or Uint8Array\n   */\n\n\n  async sign(address, data, {\n    signer\n  } = {}) {\n    if ((0, _util.isString)(address)) {\n      const _signer = signer || this._rx.signer;\n\n      (0, _util.assert)(_signer === null || _signer === void 0 ? void 0 : _signer.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');\n      return (await _signer.signRaw(_objectSpread(_objectSpread({\n        type: 'bytes'\n      }, data), {}, {\n        address\n      }))).signature;\n    }\n\n    return (0, _util.u8aToHex)(address.sign((0, _util.u8aToU8a)(data.data)));\n  }\n\n}\n\nexports.default = ApiBase;"]},"metadata":{},"sourceType":"script"}