{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = keyExtract;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _extractPath = _interopRequireDefault(require(\"./extractPath\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar RE_CAPTURE = /^(\\w+( \\w+)*)((\\/\\/?[^/]+)*)(\\/\\/\\/(.*))?$/;\n/**\n * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).\n */\n\nfunction keyExtract(suri) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  var matches = suri.match(RE_CAPTURE);\n  (0, _util.assert)(!(0, _util.isNull)(matches), 'Unable to match provided value to a secret URI');\n\n  var _matches = _slicedToArray(matches, 7),\n      phrase = _matches[1],\n      derivePath = _matches[3],\n      password = _matches[6];\n\n  var _ref = (0, _extractPath.default)(derivePath),\n      path = _ref.path;\n\n  return {\n    password: password,\n    path: path,\n    phrase: phrase\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util-crypto/key/extractSuri.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","keyExtract","_util","_extractPath","RE_CAPTURE","suri","matches","match","assert","isNull","phrase","derivePath","password","path"],"mappings":"AAAA;;;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,YAAY,GAAGT,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC,C,CAEA;AACA;;;AACA,IAAMS,UAAU,GAAG,4CAAnB;AACA;AACA;AACA;;AAEA,SAASH,UAAT,CAAoBI,IAApB,EAA0B;AACxB;AACA,MAAMC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAWH,UAAX,CAAhB;AACA,GAAC,GAAGF,KAAK,CAACM,MAAV,EAAkB,CAAC,CAAC,GAAGN,KAAK,CAACO,MAAV,EAAkBH,OAAlB,CAAnB,EAA+C,gDAA/C;;AAHwB,gCAIoBA,OAJpB;AAAA,MAIfI,MAJe;AAAA,MAINC,UAJM;AAAA,MAIQC,QAJR;;AAAA,aAOpB,CAAC,GAAGT,YAAY,CAACH,OAAjB,EAA0BW,UAA1B,CAPoB;AAAA,MAMtBE,IANsB,QAMtBA,IANsB;;AAQxB,SAAO;AACLD,IAAAA,QAAQ,EAARA,QADK;AAELC,IAAAA,IAAI,EAAJA,IAFK;AAGLH,IAAAA,MAAM,EAANA;AAHK,GAAP;AAKD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = keyExtract;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _extractPath = _interopRequireDefault(require(\"./extractPath\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst RE_CAPTURE = /^(\\w+( \\w+)*)((\\/\\/?[^/]+)*)(\\/\\/\\/(.*))?$/;\n/**\n * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).\n */\n\nfunction keyExtract(suri) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const matches = suri.match(RE_CAPTURE);\n  (0, _util.assert)(!(0, _util.isNull)(matches), 'Unable to match provided value to a secret URI');\n  const [, phrase,, derivePath,,, password] = matches;\n  const {\n    path\n  } = (0, _extractPath.default)(derivePath);\n  return {\n    password,\n    path,\n    phrase\n  };\n}"]},"metadata":{},"sourceType":"script"}