{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\n\n\nvar Base = /*#__PURE__*/function () {\n  function Base(registry, value) {\n    _classCallCheck(this, Base);\n\n    this.registry = void 0;\n    this._raw = void 0;\n    this.registry = registry;\n    this._raw = value;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(Base, [{\n    key: \"eq\",\n\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    value: function eq(other) {\n      return this._raw.eq(other);\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(isLe) {\n      return this._raw.toHex(isLe);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      return this._raw.toHuman(isExtended);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this._raw.toJSON();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._raw.toString();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return this._raw.toU8a(isBare);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Base';\n    }\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this._raw.isEmpty;\n    }\n  }]);\n\n  return Base;\n}();\n\nexports.default = Base;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/Base.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_Raw","Base","registry","_raw","other","eq","isLe","toHex","isExtended","toHuman","toJSON","toString","isBare","toU8a","length","hash","isEmpty"],"mappings":"AAAA;;;;;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,IAAI,GAAGP,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAjC,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;;;IACMO,I;AACJ,gBAAYC,QAAZ,EAAsBJ,KAAtB,EAA6B;AAAA;;AAC3B,SAAKI,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYL,KAAZ;AACD;AACD;AACF;AACA;;;;;;AAsBE;AACF;AACA;uBAGKM,K,EAAO;AACR,aAAO,KAAKD,IAAL,CAAUE,EAAV,CAAaD,KAAb,CAAP;AACD;AACD;AACF;AACA;;;;0BAGQE,I,EAAM;AACV,aAAO,KAAKH,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,CAAP;AACD;AACD;AACF;AACA;;;;4BAGUE,U,EAAY;AAClB,aAAO,KAAKL,IAAL,CAAUM,OAAV,CAAkBD,UAAlB,CAAP;AACD;AACD;AACF;AACA;;;;6BAGW;AACP,aAAO,KAAKL,IAAL,CAAUO,MAAV,EAAP;AACD;AACD;AACF;AACA;;;;+BAGa;AACT,aAAO,KAAKP,IAAL,CAAUQ,QAAV,EAAP;AACD;AACD;AACF;AACA;AACA;;;;0BAGQC,M,EAAQ;AACZ,aAAO,KAAKT,IAAL,CAAUU,KAAV,CAAgBD,MAAhB,CAAP;AACD;AACD;AACF;AACA;;;;gCAGc;AACV,aAAO,MAAP;AACD;;;wBA3EmB;AAClB,aAAO,KAAKC,KAAL,GAAaC,MAApB;AACD;AACD;AACF;AACA;;;;wBAGa;AACT,aAAO,IAAId,IAAI,CAACD,OAAT,CAAiB,KAAKG,QAAtB,EAAgC,KAAKA,QAAL,CAAca,IAAd,CAAmB,KAAKF,KAAL,EAAnB,CAAhC,CAAP;AACD;AACD;AACF;AACA;;;;wBAGgB;AACZ,aAAO,KAAKV,IAAL,CAAUa,OAAjB;AACD;;;;;;AA6DHnB,OAAO,CAACE,OAAR,GAAkBE,IAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nclass Base {\n  constructor(registry, value) {\n    this.registry = void 0;\n    this._raw = void 0;\n    this.registry = registry;\n    this._raw = value;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this._raw.isEmpty;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this._raw.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return this._raw.toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this._raw.toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this._raw.toJSON();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this._raw.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this._raw.toU8a(isBare);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Base';\n  }\n\n}\n\nexports.default = Base;"]},"metadata":{},"sourceType":"script"}