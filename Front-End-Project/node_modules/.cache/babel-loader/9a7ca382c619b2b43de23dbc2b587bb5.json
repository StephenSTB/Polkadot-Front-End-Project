{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getHasher;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\"); // Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar DEFAULT_FN = function DEFAULT_FN(data) {\n  return (0, _utilCrypto.xxhashAsU8a)(data, 128);\n};\n\nvar HASHERS = {\n  Blake2_128: function Blake2_128(data) {\n    return (// eslint-disable-line camelcase\n      (0, _utilCrypto.blake2AsU8a)(data, 128)\n    );\n  },\n  Blake2_128Concat: function Blake2_128Concat(data) {\n    return (// eslint-disable-line camelcase\n      (0, _util.u8aConcat)((0, _utilCrypto.blake2AsU8a)(data, 128), (0, _util.u8aToU8a)(data))\n    );\n  },\n  Blake2_256: function Blake2_256(data) {\n    return (// eslint-disable-line camelcase\n      (0, _utilCrypto.blake2AsU8a)(data, 256)\n    );\n  },\n  Identity: function Identity(data) {\n    return (0, _util.u8aToU8a)(data);\n  },\n  Twox128: function Twox128(data) {\n    return (0, _utilCrypto.xxhashAsU8a)(data, 128);\n  },\n  Twox256: function Twox256(data) {\n    return (0, _utilCrypto.xxhashAsU8a)(data, 256);\n  },\n  Twox64Concat: function Twox64Concat(data) {\n    return (0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(data, 64), (0, _util.u8aToU8a)(data));\n  }\n};\n/** @internal */\n\nfunction getHasher(hasher) {\n  return HASHERS[hasher === null || hasher === void 0 ? void 0 : hasher.type] || DEFAULT_FN;\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/metadata/Decorated/storage/fromMetadata/getHasher.js"],"names":["Object","defineProperty","exports","value","default","getHasher","_util","require","_utilCrypto","DEFAULT_FN","data","xxhashAsU8a","HASHERS","Blake2_128","blake2AsU8a","Blake2_128Concat","u8aConcat","u8aToU8a","Blake2_256","Identity","Twox128","Twox256","Twox64Concat","hasher","type"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,uBAAD,CAAzB,C,CAEA;AACA;;;AACA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI;AAAA,SAAI,CAAC,GAAGF,WAAW,CAACG,WAAhB,EAA6BD,IAA7B,EAAmC,GAAnC,CAAJ;AAAA,CAAvB;;AAEA,IAAME,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,oBAAAH,IAAI;AAAA,WAAI;AACpB,OAAC,GAAGF,WAAW,CAACM,WAAhB,EAA6BJ,IAA7B,EAAmC,GAAnC;AADgB;AAAA,GADF;AAGdK,EAAAA,gBAAgB,EAAE,0BAAAL,IAAI;AAAA,WAAI;AAC1B,OAAC,GAAGJ,KAAK,CAACU,SAAV,EAAqB,CAAC,GAAGR,WAAW,CAACM,WAAhB,EAA6BJ,IAA7B,EAAmC,GAAnC,CAArB,EAA8D,CAAC,GAAGJ,KAAK,CAACW,QAAV,EAAoBP,IAApB,CAA9D;AADsB;AAAA,GAHR;AAKdQ,EAAAA,UAAU,EAAE,oBAAAR,IAAI;AAAA,WAAI;AACpB,OAAC,GAAGF,WAAW,CAACM,WAAhB,EAA6BJ,IAA7B,EAAmC,GAAnC;AADgB;AAAA,GALF;AAOdS,EAAAA,QAAQ,EAAE,kBAAAT,IAAI;AAAA,WAAI,CAAC,GAAGJ,KAAK,CAACW,QAAV,EAAoBP,IAApB,CAAJ;AAAA,GAPA;AAQdU,EAAAA,OAAO,EAAE,iBAAAV,IAAI;AAAA,WAAI,CAAC,GAAGF,WAAW,CAACG,WAAhB,EAA6BD,IAA7B,EAAmC,GAAnC,CAAJ;AAAA,GARC;AASdW,EAAAA,OAAO,EAAE,iBAAAX,IAAI;AAAA,WAAI,CAAC,GAAGF,WAAW,CAACG,WAAhB,EAA6BD,IAA7B,EAAmC,GAAnC,CAAJ;AAAA,GATC;AAUdY,EAAAA,YAAY,EAAE,sBAAAZ,IAAI;AAAA,WAAI,CAAC,GAAGJ,KAAK,CAACU,SAAV,EAAqB,CAAC,GAAGR,WAAW,CAACG,WAAhB,EAA6BD,IAA7B,EAAmC,EAAnC,CAArB,EAA6D,CAAC,GAAGJ,KAAK,CAACW,QAAV,EAAoBP,IAApB,CAA7D,CAAJ;AAAA;AAVJ,CAAhB;AAYA;;AAEA,SAASL,SAAT,CAAmBkB,MAAnB,EAA2B;AACzB,SAAOX,OAAO,CAACW,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACC,IAAxD,CAAP,IAAwEf,UAA/E;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getHasher;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\n// Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst DEFAULT_FN = data => (0, _utilCrypto.xxhashAsU8a)(data, 128);\n\nconst HASHERS = {\n  Blake2_128: data => // eslint-disable-line camelcase\n  (0, _utilCrypto.blake2AsU8a)(data, 128),\n  Blake2_128Concat: data => // eslint-disable-line camelcase\n  (0, _util.u8aConcat)((0, _utilCrypto.blake2AsU8a)(data, 128), (0, _util.u8aToU8a)(data)),\n  Blake2_256: data => // eslint-disable-line camelcase\n  (0, _utilCrypto.blake2AsU8a)(data, 256),\n  Identity: data => (0, _util.u8aToU8a)(data),\n  Twox128: data => (0, _utilCrypto.xxhashAsU8a)(data, 128),\n  Twox256: data => (0, _utilCrypto.xxhashAsU8a)(data, 256),\n  Twox64Concat: data => (0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(data, 64), (0, _util.u8aToU8a)(data))\n};\n/** @internal */\n\nfunction getHasher(hasher) {\n  return HASHERS[hasher === null || hasher === void 0 ? void 0 : hasher.type] || DEFAULT_FN;\n}"]},"metadata":{},"sourceType":"script"}