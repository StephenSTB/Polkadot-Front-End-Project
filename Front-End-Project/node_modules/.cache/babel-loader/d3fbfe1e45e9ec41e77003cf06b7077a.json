{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeU8a(value) {\n  if ((0, _util.isU8a)(value)) {\n    return value;\n  }\n\n  return (0, _util.u8aToU8a)(value);\n}\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\n\nvar Raw = /*#__PURE__*/function (_Uint8Array) {\n  _inherits(Raw, _Uint8Array);\n\n  var _super = _createSuper(Raw);\n\n  function Raw(registry, value) {\n    var _this;\n\n    _classCallCheck(this, Raw);\n\n    _this = _super.call(this, decodeU8a(value));\n    _this.registry = void 0;\n    _this.registry = registry;\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(Raw, [{\n    key: \"bitLength\",\n\n    /**\n     * @description Returns the number of bits in the value\n     */\n    value: function bitLength() {\n      return this.length * 8;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      if (other instanceof Uint8Array) {\n        return this.length === other.length && !this.some(function (value, index) {\n          return value !== other[index];\n        });\n      }\n\n      return this.eq(decodeU8a(other));\n    }\n    /**\n     * @description Create a new subarray from the actual buffer. This is needed for compat reasons since a new Uint8Array gets returned here\n     * @param begin The position to start at\n     * @param end The position to end at\n     */\n\n  }, {\n    key: \"subarray\",\n    value: function subarray(begin, end) {\n      return Uint8Array.from(this).subarray(begin, end);\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return (0, _util.u8aToHex)(this);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.isAscii ? this.toUtf8() : this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toHex();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Raw';\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return Uint8Array.from(this);\n    }\n    /**\n     * @description Returns the wrapped data as a UTF-8 string\n     */\n\n  }, {\n    key: \"toUtf8\",\n    value: function toUtf8() {\n      (0, _util.assert)(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n      return (0, _util.u8aToString)(this);\n    }\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return this.length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return new Raw(this.registry, this.registry.hash(this.toU8a()));\n    }\n    /**\n     * @description Returns true if the wrapped value contains only ASCII printable characters\n     */\n\n  }, {\n    key: \"isAscii\",\n    get: function get() {\n      return (0, _util.isAscii)(this);\n    }\n    /**\n     * @description Returns true if the type wraps an empty/default all-0 value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return !this.length || (0, _util.isUndefined)(this.find(function (value) {\n        return !!value;\n      }));\n    }\n    /**\n     * @description Returns true if the wrapped value contains only utf8 characters\n     */\n\n  }, {\n    key: \"isUtf8\",\n    get: function get() {\n      return (0, _util.isUtf8)(this);\n    }\n    /**\n     * @description The length of the value\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      // only included here since we ignore inherited docs\n      return _get(_getPrototypeOf(Raw.prototype), \"length\", this);\n    }\n  }]);\n\n  return Raw;\n}( /*#__PURE__*/_wrapNativeSuper(Uint8Array));\n\nexports.default = Raw;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/Raw.js"],"names":["Object","defineProperty","exports","value","default","_util","require","decodeU8a","isU8a","u8aToU8a","Raw","registry","length","other","Uint8Array","some","index","eq","begin","end","from","subarray","u8aToHex","isAscii","toUtf8","toJSON","toHex","isBare","assert","isUtf8","u8aToString","hash","toU8a","isUndefined","find"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeU8a(value) {\n  if ((0, _util.isU8a)(value)) {\n    return value;\n  }\n\n  return (0, _util.u8aToU8a)(value);\n}\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\n\nclass Raw extends Uint8Array {\n  constructor(registry, value) {\n    super(decodeU8a(value));\n    this.registry = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new Raw(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only ASCII printable characters\n   */\n\n\n  get isAscii() {\n    return (0, _util.isAscii)(this);\n  }\n  /**\n   * @description Returns true if the type wraps an empty/default all-0 value\n   */\n\n\n  get isEmpty() {\n    return !this.length || (0, _util.isUndefined)(this.find(value => !!value));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only utf8 characters\n   */\n\n\n  get isUtf8() {\n    return (0, _util.isUtf8)(this);\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return this.length * 8;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (other instanceof Uint8Array) {\n      return this.length === other.length && !this.some((value, index) => value !== other[index]);\n    }\n\n    return this.eq(decodeU8a(other));\n  }\n  /**\n   * @description Create a new subarray from the actual buffer. This is needed for compat reasons since a new Uint8Array gets returned here\n   * @param begin The position to start at\n   * @param end The position to end at\n   */\n\n\n  subarray(begin, end) {\n    return Uint8Array.from(this).subarray(begin, end);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.isAscii ? this.toUtf8() : this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Raw';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Uint8Array.from(this);\n  }\n  /**\n   * @description Returns the wrapped data as a UTF-8 string\n   */\n\n\n  toUtf8() {\n    (0, _util.assert)(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n    return (0, _util.u8aToString)(this);\n  }\n\n}\n\nexports.default = Raw;"]},"metadata":{},"sourceType":"script"}