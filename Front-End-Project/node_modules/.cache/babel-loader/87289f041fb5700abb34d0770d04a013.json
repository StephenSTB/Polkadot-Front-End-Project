{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"LATEST_EXTRINSIC_VERSION\", {\n  enumerable: true,\n  get: function get() {\n    return _Extrinsic.EXTRINSIC_VERSION;\n  }\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Base = _interopRequireDefault(require(\"../codec/Base\"));\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Extrinsic = require(\"./v4/Extrinsic\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar VERSIONS = ['ExtrinsicUnknown', // v0 is unknown\n'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];\n\nvar ExtrinsicBase = /*#__PURE__*/function (_Base$default) {\n  _inherits(ExtrinsicBase, _Base$default);\n\n  var _super = _createSuper(ExtrinsicBase);\n\n  function ExtrinsicBase() {\n    _classCallCheck(this, ExtrinsicBase);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExtrinsicBase, [{\n    key: \"args\",\n\n    /**\n     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]\n     */\n    get: function get() {\n      return this.method.args;\n    }\n    /**\n     * @description The argument definitions, compatible with [[Call]]\n     */\n\n  }, {\n    key: \"argsDef\",\n    get: function get() {\n      return this.method.argsDef;\n    }\n    /**\n     * @description The actual `[sectionIndex, methodIndex]` as used in the Call\n     */\n\n  }, {\n    key: \"callIndex\",\n    get: function get() {\n      return this.method.callIndex;\n    }\n    /**\n     * @description The actual data for the Call\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.method.data;\n    }\n    /**\n     * @description The era for this extrinsic\n     */\n\n  }, {\n    key: \"era\",\n    get: function get() {\n      return this._raw.signature.era;\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return this.toU8a().length;\n    }\n    /**\n     * @description `true` is method has `Origin` argument (compatibility with [Call])\n     */\n\n  }, {\n    key: \"hasOrigin\",\n    get: function get() {\n      return this.method.hasOrigin;\n    }\n    /**\n     * @description `true` id the extrinsic is signed\n     */\n\n  }, {\n    key: \"isSigned\",\n    get: function get() {\n      return this._raw.signature.isSigned;\n    }\n    /**\n     * @description The length of the actual data, excluding prefix\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.toU8a(true).length;\n    }\n    /**\n     * @description The [[FunctionMetadataLatest]] that describes the extrinsic\n     */\n\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.method.meta;\n    }\n    /**\n     * @description The [[Call]] this extrinsic wraps\n     */\n\n  }, {\n    key: \"method\",\n    get: function get() {\n      return this._raw.method;\n    }\n    /**\n     * @description The nonce for this extrinsic\n     */\n\n  }, {\n    key: \"nonce\",\n    get: function get() {\n      return this._raw.signature.nonce;\n    }\n    /**\n     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]\n     */\n\n  }, {\n    key: \"signature\",\n    get: function get() {\n      return this._raw.signature.signature;\n    }\n    /**\n     * @description The [[Address]] that signed\n     */\n\n  }, {\n    key: \"signer\",\n    get: function get() {\n      return this._raw.signature.signer;\n    }\n    /**\n     * @description Forwards compat\n     */\n\n  }, {\n    key: \"tip\",\n    get: function get() {\n      return this._raw.signature.tip;\n    }\n    /**\n     * @description Returns the raw transaction version (not flagged with signing information)\n    */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._raw.version;\n    }\n    /**\n     * @description Returns the encoded version flag\n    */\n\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this.type | (this.isSigned ? _constants.BIT_SIGNED : _constants.BIT_UNSIGNED);\n    }\n  }]);\n\n  return ExtrinsicBase;\n}(_Base.default);\n/**\n * @name GenericExtrinsic\n * @description\n * Representation of an Extrinsic in the system. It contains the actual call,\n * (optional) signature and encodes with an actual length prefix\n *\n * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.\n *\n * Can be:\n * - signed, to create a transaction\n * - left as is, to create an inherent\n */\n\n\nvar Extrinsic = /*#__PURE__*/function (_ExtrinsicBase) {\n  _inherits(Extrinsic, _ExtrinsicBase);\n\n  var _super2 = _createSuper(Extrinsic);\n\n  function Extrinsic(registry, value) {\n    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        version = _ref.version;\n\n    _classCallCheck(this, Extrinsic);\n\n    return _super2.call(this, registry, Extrinsic._decodeExtrinsic(registry, value, version));\n  }\n  /** @internal */\n\n\n  _createClass(Extrinsic, [{\n    key: \"addSignature\",\n\n    /**\n     * @description Injects an already-generated signature into the extrinsic\n     */\n    value: function addSignature(signer, signature, payload) {\n      this._raw.addSignature(signer, signature, payload);\n\n      return this;\n    }\n    /**\n     * @description Sign the extrinsic with a specific keypair\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(account, options) {\n      this._raw.sign(account, options);\n\n      return this;\n    }\n    /**\n     * @describe Adds a fake signature to the extrinsic\n     */\n\n  }, {\n    key: \"signFake\",\n    value: function signFake(signer, options) {\n      this._raw.signFake(signer, options);\n\n      return this;\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(isBare) {\n      return (0, _util.u8aToHex)(this.toU8a(isBare));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExpanded) {\n      return _objectSpread({\n        isSigned: this.isSigned,\n        method: this.method.toHuman(isExpanded)\n      }, this.isSigned ? {\n        era: this.era.toHuman(isExpanded),\n        nonce: this.nonce.toHuman(isExpanded),\n        signature: this.signature.toHex(),\n        signer: this.signer.toHuman(isExpanded),\n        tip: this.tip.toHuman(isExpanded)\n      } : {});\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toHex();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'Extrinsic';\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value is not length-prefixed\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      // we do not apply bare to the internal values, rather this only determines out length addition,\n      // where we strip all lengths this creates an extrinsic that cannot be decoded\n      var encoded = (0, _util.u8aConcat)(new Uint8Array([this.version]), this._raw.toU8a());\n      return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);\n    }\n  }], [{\n    key: \"_newFromValue\",\n    value: function _newFromValue(registry, value, version) {\n      if (value instanceof Extrinsic) {\n        return value._raw;\n      }\n\n      var isSigned = (version & _constants.BIT_SIGNED) === _constants.BIT_SIGNED;\n      var type = VERSIONS[version & _constants.UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a\n      // slice for \"only add extrinsic types\", and more string definitions become unwieldy\n\n      return registry.createType(type, value, {\n        isSigned: isSigned,\n        version: version\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_decodeExtrinsic\",\n    value: function _decodeExtrinsic(registry, value) {\n      var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.DEFAULT_VERSION;\n\n      if ((0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value)) {\n        return Extrinsic._decodeU8a(registry, (0, _util.u8aToU8a)(value), version);\n      } else if (value instanceof registry.createClass('Call')) {\n        return Extrinsic._newFromValue(registry, {\n          method: value\n        }, version);\n      }\n\n      return Extrinsic._newFromValue(registry, value, version);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_decodeU8a\",\n    value: function _decodeU8a(registry, value, version) {\n      if (!value.length) {\n        return Extrinsic._newFromValue(registry, new Uint8Array(), version);\n      }\n\n      var _Compact$default$deco = _Compact.default.decodeU8a(value),\n          _Compact$default$deco2 = _slicedToArray(_Compact$default$deco, 2),\n          offset = _Compact$default$deco2[0],\n          length = _Compact$default$deco2[1];\n\n      var total = offset + length.toNumber();\n      (0, _util.assert)(total <= value.length, \"Extrinsic: length less than remainder, expected at least \".concat(total, \", found \").concat(value.length));\n      var data = value.subarray(offset, total);\n      return Extrinsic._newFromValue(registry, data.subarray(1), data[0]);\n    }\n  }]);\n\n  return Extrinsic;\n}(ExtrinsicBase);\n\nexports.default = Extrinsic;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/extrinsic/Extrinsic.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","enumerable","get","_Extrinsic","EXTRINSIC_VERSION","default","_defineProperty2","_util","_Base","_Compact","_constants","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","VERSIONS","ExtrinsicBase","method","args","argsDef","callIndex","data","_raw","signature","era","toU8a","hasOrigin","isSigned","meta","nonce","signer","tip","version","type","BIT_SIGNED","BIT_UNSIGNED","Extrinsic","registry","_decodeExtrinsic","payload","addSignature","account","options","sign","signFake","isBare","u8aToHex","isExpanded","toHuman","toHex","encoded","u8aConcat","Uint8Array","addLengthPrefix","UNMASK_VERSION","createType","DEFAULT_VERSION","isU8a","Array","isArray","isHex","_decodeU8a","u8aToU8a","createClass","_newFromValue","decodeU8a","offset","total","toNumber","assert","subarray"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"LATEST_EXTRINSIC_VERSION\", {\n  enumerable: true,\n  get: function () {\n    return _Extrinsic.EXTRINSIC_VERSION;\n  }\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Base = _interopRequireDefault(require(\"../codec/Base\"));\n\nvar _Compact = _interopRequireDefault(require(\"../codec/Compact\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Extrinsic = require(\"./v4/Extrinsic\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst VERSIONS = ['ExtrinsicUnknown', // v0 is unknown\n'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];\n\nclass ExtrinsicBase extends _Base.default {\n  /**\n   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]\n   */\n  get args() {\n    return this.method.args;\n  }\n  /**\n   * @description The argument definitions, compatible with [[Call]]\n   */\n\n\n  get argsDef() {\n    return this.method.argsDef;\n  }\n  /**\n   * @description The actual `[sectionIndex, methodIndex]` as used in the Call\n   */\n\n\n  get callIndex() {\n    return this.method.callIndex;\n  }\n  /**\n   * @description The actual data for the Call\n   */\n\n\n  get data() {\n    return this.method.data;\n  }\n  /**\n   * @description The era for this extrinsic\n   */\n\n\n  get era() {\n    return this._raw.signature.era;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description `true` is method has `Origin` argument (compatibility with [Call])\n   */\n\n\n  get hasOrigin() {\n    return this.method.hasOrigin;\n  }\n  /**\n   * @description `true` id the extrinsic is signed\n   */\n\n\n  get isSigned() {\n    return this._raw.signature.isSigned;\n  }\n  /**\n   * @description The length of the actual data, excluding prefix\n   */\n\n\n  get length() {\n    return this.toU8a(true).length;\n  }\n  /**\n   * @description The [[FunctionMetadataLatest]] that describes the extrinsic\n   */\n\n\n  get meta() {\n    return this.method.meta;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this._raw.method;\n  }\n  /**\n   * @description The nonce for this extrinsic\n   */\n\n\n  get nonce() {\n    return this._raw.signature.nonce;\n  }\n  /**\n   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]\n   */\n\n\n  get signature() {\n    return this._raw.signature.signature;\n  }\n  /**\n   * @description The [[Address]] that signed\n   */\n\n\n  get signer() {\n    return this._raw.signature.signer;\n  }\n  /**\n   * @description Forwards compat\n   */\n\n\n  get tip() {\n    return this._raw.signature.tip;\n  }\n  /**\n   * @description Returns the raw transaction version (not flagged with signing information)\n  */\n\n\n  get type() {\n    return this._raw.version;\n  }\n  /**\n   * @description Returns the encoded version flag\n  */\n\n\n  get version() {\n    return this.type | (this.isSigned ? _constants.BIT_SIGNED : _constants.BIT_UNSIGNED);\n  }\n\n}\n/**\n * @name GenericExtrinsic\n * @description\n * Representation of an Extrinsic in the system. It contains the actual call,\n * (optional) signature and encodes with an actual length prefix\n *\n * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.\n *\n * Can be:\n * - signed, to create a transaction\n * - left as is, to create an inherent\n */\n\n\nclass Extrinsic extends ExtrinsicBase {\n  constructor(registry, value, {\n    version\n  } = {}) {\n    super(registry, Extrinsic._decodeExtrinsic(registry, value, version));\n  }\n  /** @internal */\n\n\n  static _newFromValue(registry, value, version) {\n    if (value instanceof Extrinsic) {\n      return value._raw;\n    }\n\n    const isSigned = (version & _constants.BIT_SIGNED) === _constants.BIT_SIGNED;\n    const type = VERSIONS[version & _constants.UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a\n    // slice for \"only add extrinsic types\", and more string definitions become unwieldy\n\n    return registry.createType(type, value, {\n      isSigned,\n      version\n    });\n  }\n  /** @internal */\n\n\n  static _decodeExtrinsic(registry, value, version = _constants.DEFAULT_VERSION) {\n    if ((0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value)) {\n      return Extrinsic._decodeU8a(registry, (0, _util.u8aToU8a)(value), version);\n    } else if (value instanceof registry.createClass('Call')) {\n      return Extrinsic._newFromValue(registry, {\n        method: value\n      }, version);\n    }\n\n    return Extrinsic._newFromValue(registry, value, version);\n  }\n  /** @internal */\n\n\n  static _decodeU8a(registry, value, version) {\n    if (!value.length) {\n      return Extrinsic._newFromValue(registry, new Uint8Array(), version);\n    }\n\n    const [offset, length] = _Compact.default.decodeU8a(value);\n\n    const total = offset + length.toNumber();\n    (0, _util.assert)(total <= value.length, `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);\n    const data = value.subarray(offset, total);\n    return Extrinsic._newFromValue(registry, data.subarray(1), data[0]);\n  }\n  /**\n   * @description Injects an already-generated signature into the extrinsic\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this._raw.addSignature(signer, signature, payload);\n\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this._raw.sign(account, options);\n\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n\n\n  signFake(signer, options) {\n    this._raw.signFake(signer, options);\n\n    return this;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex(isBare) {\n    return (0, _util.u8aToHex)(this.toU8a(isBare));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExpanded) {\n    return _objectSpread({\n      isSigned: this.isSigned,\n      method: this.method.toHuman(isExpanded)\n    }, this.isSigned ? {\n      era: this.era.toHuman(isExpanded),\n      nonce: this.nonce.toHuman(isExpanded),\n      signature: this.signature.toHex(),\n      signer: this.signer.toHuman(isExpanded),\n      tip: this.tip.toHuman(isExpanded)\n    } : {});\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Extrinsic';\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value is not length-prefixed\n   */\n\n\n  toU8a(isBare) {\n    // we do not apply bare to the internal values, rather this only determines out length addition,\n    // where we strip all lengths this creates an extrinsic that cannot be decoded\n    const encoded = (0, _util.u8aConcat)(new Uint8Array([this.version]), this._raw.toU8a());\n    return isBare ? encoded : _Compact.default.addLengthPrefix(encoded);\n  }\n\n}\n\nexports.default = Extrinsic;"]},"metadata":{},"sourceType":"script"}