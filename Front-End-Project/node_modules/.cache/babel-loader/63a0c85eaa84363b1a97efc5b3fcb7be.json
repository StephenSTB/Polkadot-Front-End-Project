{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.all = all;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar VESTING_ID = '0x76657374696e6720';\n\nfunction calcBalances(api, _ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      _ref2$ = _ref2[0],\n      accountId = _ref2$.accountId,\n      accountNonce = _ref2$.accountNonce,\n      freeBalance = _ref2$.freeBalance,\n      frozenFee = _ref2$.frozenFee,\n      frozenMisc = _ref2$.frozenMisc,\n      reservedBalance = _ref2$.reservedBalance,\n      votingBalance = _ref2$.votingBalance,\n      bestNumber = _ref2[1],\n      _ref2$2 = _slicedToArray(_ref2[2], 2),\n      vesting = _ref2$2[0],\n      locks = _ref2$2[1];\n\n  var lockedBalance = api.registry.createType('Balance');\n  var lockedBreakdown = [];\n  var vestingLocked = api.registry.createType('Balance');\n  var allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(function (_ref3) {\n      var until = _ref3.until;\n      return !until || bestNumber && until.gt(bestNumber);\n    });\n    var notAll = lockedBreakdown.filter(function (_ref4) {\n      var amount = _ref4.amount;\n      return !amount.isMax();\n    });\n    allLocked = lockedBreakdown.some(function (_ref5) {\n      var amount = _ref5.amount;\n      return amount.isMax();\n    });\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(function (_ref6) {\n      var id = _ref6.id;\n      return id.eq(VESTING_ID);\n    }).reduce(function (result, _ref7) {\n      var amount = _ref7.amount;\n      return result.iadd(amount);\n    }, new _bn.default(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', (0, _util.bnMax).apply(void 0, _toConsumableArray(notAll.map(function (_ref8) {\n        var amount = _ref8.amount;\n        return amount;\n      }))));\n    }\n  } // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n\n  var _ref9 = vesting || api.registry.createType('VestingInfo'),\n      vestingTotal = _ref9.locked,\n      perBlock = _ref9.perBlock,\n      startingBlock = _ref9.startingBlock;\n\n  var isStarted = bestNumber.gt(startingBlock);\n  var vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new _bn.default(0);\n  var vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  var isVesting = isStarted && !vestingLocked.isZero();\n  var vestedClaimable = api.registry.createType('Balance', isVesting ? vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  var availableBalance = api.registry.createType('Balance', allLocked ? 0 : (0, _util.bnMax)(new _bn.default(0), freeBalance.sub(lockedBalance)));\n  var vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return {\n    accountId: accountId,\n    accountNonce: accountNonce,\n    availableBalance: availableBalance,\n    freeBalance: freeBalance,\n    frozenFee: frozenFee,\n    frozenMisc: frozenMisc,\n    isVesting: isVesting,\n    lockedBalance: lockedBalance,\n    lockedBreakdown: lockedBreakdown,\n    reservedBalance: reservedBalance,\n    vestedBalance: vestedBalance,\n    vestedClaimable: vestedClaimable,\n    vestingEndBlock: vestingEndBlock,\n    vestingLocked: vestingLocked,\n    vestingPerBlock: perBlock,\n    vestingTotal: vestingTotal,\n    votingBalance: votingBalance\n  };\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _operators.map)(function (_ref10) {\n    var _ref11 = _slicedToArray(_ref10, 2),\n        locks = _ref11[0],\n        optVesting = _ref11[1];\n\n    var vestingNew = null;\n\n    if (optVesting.isSome) {\n      var _optVesting$unwrap = optVesting.unwrap(),\n          locked = _optVesting$unwrap.offset,\n          perBlock = _optVesting$unwrap.perBlock,\n          startingBlock = _optVesting$unwrap.startingBlock;\n\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked: locked,\n        perBlock: perBlock,\n        startingBlock: startingBlock\n      });\n    }\n\n    return [vestingNew, locks];\n  }));\n} // current (balances  vesting)\n\n\nfunction queryCurrent(api, accountId) {\n  var _api$query$vesting;\n\n  return (((_api$query$vesting = api.query.vesting) === null || _api$query$vesting === void 0 ? void 0 : _api$query$vesting.vesting) ? api.queryMulti([[api.query.balances.locks, accountId], [api.query.vesting.vesting, accountId]]) : api.query.balances.locks(accountId).pipe((0, _operators.map)(function (locks) {\n    return [locks, api.registry.createType('Option<VestingInfo>')];\n  }))).pipe((0, _operators.map)(function (_ref12) {\n    var _ref13 = _slicedToArray(_ref12, 2),\n        locks = _ref13[0],\n        optVesting = _ref13[1];\n\n    return [optVesting.unwrapOr(null), locks];\n  }));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction all(instanceId, api) {\n  return (0, _util2.memo)(instanceId, function (address) {\n    return api.derive.balances.account(address).pipe((0, _operators.switchMap)(function (account) {\n      return !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util.isFunction)(api.query.system.account) || (0, _util.isFunction)(api.query.balances.account) ? queryCurrent(api, account.accountId) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, api.registry.createType('Vec<BalanceLock>')]]);\n    }), (0, _operators.map)(function (result) {\n      return calcBalances(api, result);\n    }));\n  });\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/balances/all.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","all","_bn","_rxjs","_operators","_util","_util2","VESTING_ID","calcBalances","api","accountId","accountNonce","freeBalance","frozenFee","frozenMisc","reservedBalance","votingBalance","bestNumber","vesting","locks","lockedBalance","registry","createType","lockedBreakdown","vestingLocked","allLocked","Array","isArray","filter","until","gt","notAll","amount","isMax","some","id","eq","reduce","result","iadd","default","length","bnMax","map","vestingTotal","locked","perBlock","startingBlock","isStarted","vestedNow","mul","sub","vestedBalance","isVesting","isZero","vestedClaimable","availableBalance","vestingEndBlock","div","add","vestingPerBlock","queryOld","queryMulti","query","balances","pipe","optVesting","vestingNew","isSome","unwrap","offset","queryCurrent","_api$query$vesting","unwrapOr","instanceId","memo","address","derive","account","switchMap","isEmpty","combineLatest","of","chain","isFunction","system"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.all = all;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst VESTING_ID = '0x76657374696e6720';\n\nfunction calcBalances(api, [{\n  accountId,\n  accountNonce,\n  freeBalance,\n  frozenFee,\n  frozenMisc,\n  reservedBalance,\n  votingBalance\n}, bestNumber, [vesting, locks]]) {\n  let lockedBalance = api.registry.createType('Balance');\n  let lockedBreakdown = [];\n  let vestingLocked = api.registry.createType('Balance');\n  let allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(({\n      until\n    }) => !until || bestNumber && until.gt(bestNumber));\n    const notAll = lockedBreakdown.filter(({\n      amount\n    }) => !amount.isMax());\n    allLocked = lockedBreakdown.some(({\n      amount\n    }) => amount.isMax());\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({\n      id\n    }) => id.eq(VESTING_ID)).reduce((result, {\n      amount\n    }) => result.iadd(amount), new _bn.default(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', (0, _util.bnMax)(...notAll.map(({\n        amount\n      }) => amount)));\n    }\n  } // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n\n  const {\n    locked: vestingTotal,\n    perBlock,\n    startingBlock\n  } = vesting || api.registry.createType('VestingInfo');\n  const isStarted = bestNumber.gt(startingBlock);\n  const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new _bn.default(0);\n  const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  const isVesting = isStarted && !vestingLocked.isZero();\n  const vestedClaimable = api.registry.createType('Balance', isVesting ? vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  const availableBalance = api.registry.createType('Balance', allLocked ? 0 : (0, _util.bnMax)(new _bn.default(0), freeBalance.sub(lockedBalance)));\n  const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return {\n    accountId,\n    accountNonce,\n    availableBalance,\n    freeBalance,\n    frozenFee,\n    frozenMisc,\n    isVesting,\n    lockedBalance,\n    lockedBreakdown,\n    reservedBalance,\n    vestedBalance,\n    vestedClaimable,\n    vestingEndBlock,\n    vestingLocked,\n    vestingPerBlock: perBlock,\n    vestingTotal,\n    votingBalance\n  };\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _operators.map)(([locks, optVesting]) => {\n    let vestingNew = null;\n\n    if (optVesting.isSome) {\n      const {\n        offset: locked,\n        perBlock,\n        startingBlock\n      } = optVesting.unwrap();\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked,\n        perBlock,\n        startingBlock\n      });\n    }\n\n    return [vestingNew, locks];\n  }));\n} // current (balances  vesting)\n\n\nfunction queryCurrent(api, accountId) {\n  var _api$query$vesting;\n\n  return (((_api$query$vesting = api.query.vesting) === null || _api$query$vesting === void 0 ? void 0 : _api$query$vesting.vesting) ? api.queryMulti([[api.query.balances.locks, accountId], [api.query.vesting.vesting, accountId]]) : api.query.balances.locks(accountId).pipe((0, _operators.map)(locks => [locks, api.registry.createType('Option<VestingInfo>')]))).pipe((0, _operators.map)(([locks, optVesting]) => [optVesting.unwrapOr(null), locks]));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction all(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => api.derive.balances.account(address).pipe((0, _operators.switchMap)(account => !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util.isFunction)(api.query.system.account) || (0, _util.isFunction)(api.query.balances.account) ? queryCurrent(api, account.accountId) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, api.registry.createType('Vec<BalanceLock>')]])), (0, _operators.map)(result => calcBalances(api, result))));\n}"]},"metadata":{},"sourceType":"script"}