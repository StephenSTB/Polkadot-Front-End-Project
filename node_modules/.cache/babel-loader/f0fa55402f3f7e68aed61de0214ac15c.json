{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/src/BlockInfo.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main(props) {\n  const {\n    api\n  } = useSubstrate();\n  const [lastBlockHeader, setLastBlockHeader] = useState(null);\n  /*\r\n  const getInfo = async () =>{\r\n      const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {\r\n          //console.log(`Chain is at block: #${header.hash}`);\\\r\n          setBlockNumber(header.number.toNumber());\r\n          setBlockHash(header.hash.toHuman());\r\n          setParrentHash(header.parentHash.toHuman());\r\n          setExtrinsicsRoot(header.extrinsicsRoot.toHuman());\r\n          setStateRoot();\r\n          //console.log(blockHash)\r\n          \r\n      });\r\n  }\r\n  getInfo();*/\n\n  useEffect(() => {\n    let unsubscribeAll = null; // make a call to retrieve the current network head\n\n    api.rpc.chain.subscribeNewHeads(header => {\n      console.log(`Chain is at #${header}`);\n      setLastBlockHeader(header);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n    return () => unsubscribeAll && unsubscribeAll();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, lastBlockHeader.number.toNumber());\n}\n\nexport default function BlockInfo(props) {\n  const {\n    api\n  } = useSubstrate();\n  return api.rpc && api.rpc.chain && api.rpc.chain.subscribeNewHeads ? /*#__PURE__*/React.createElement(Main, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })) : null;\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/src/BlockInfo.js"],"names":["React","useEffect","useState","useSubstrate","Main","props","api","lastBlockHeader","setLastBlockHeader","unsubscribeAll","rpc","chain","subscribeNewHeads","header","console","log","then","unsub","catch","error","number","toNumber","BlockInfo"],"mappings":";AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,YAAT,QAA6B,iBAA7B;;AAIA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAAUH,YAAY,EAA5B;AAEA,QAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,IAAD,CAAtD;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEID,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,cAAc,GAAG,IAArB,CADY,CAGZ;;AACAH,IAAAA,GAAG,CAACI,GAAJ,CAAQC,KAAR,CAAcC,iBAAd,CAAiCC,MAAD,IAAY;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeF,MAAO,EAAnC;AACAL,MAAAA,kBAAkB,CAACK,MAAD,CAAlB;AACH,KAHD,EAGGG,IAHH,CAGQC,KAAK,IAAI;AACbR,MAAAA,cAAc,GAAGQ,KAAjB;AACH,KALD,EAKGC,KALH,CAKSJ,OAAO,CAACK,KALjB;AAOA,WAAO,MAAMV,cAAc,IAAIA,cAAc,EAA7C;AACH,GAZQ,EAYN,EAZM,CAAT;AAcA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,eAAe,CAACa,MAAhB,CAAuBC,QAAvB,EADL,CADJ;AAMH;;AAED,eAAe,SAASC,SAAT,CAAmBjB,KAAnB,EAAyB;AACpC,QAAK;AAACC,IAAAA;AAAD,MAAQH,YAAY,EAAzB;AACA,SAAOG,GAAG,CAACI,GAAJ,IACPJ,GAAG,CAACI,GAAJ,CAAQC,KADD,IAEPL,GAAG,CAACI,GAAJ,CAAQC,KAAR,CAAcC,iBAFP,gBAGH,oBAAC,IAAD,oBAAUP,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHG,GAIH,IAJJ;AAKH","sourcesContent":["\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\n\r\n\r\nfunction Main(props){\r\n    const { api } = useSubstrate();\r\n \r\n    const [lastBlockHeader, setLastBlockHeader] = useState(null);\r\n    /*\r\n    const getInfo = async () =>{\r\n        const unsubscribe = await api.rpc.chain.subscribeNewHeads((header) => {\r\n            //console.log(`Chain is at block: #${header.hash}`);\\\r\n            setBlockNumber(header.number.toNumber());\r\n            setBlockHash(header.hash.toHuman());\r\n            setParrentHash(header.parentHash.toHuman());\r\n            setExtrinsicsRoot(header.extrinsicsRoot.toHuman());\r\n            setStateRoot();\r\n            //console.log(blockHash)\r\n            \r\n        });\r\n    }\r\n    getInfo();*/\r\n\r\n    useEffect(() => {\r\n        let unsubscribeAll = null;\r\n\r\n        // make a call to retrieve the current network head\r\n        api.rpc.chain.subscribeNewHeads((header) => {\r\n            console.log(`Chain is at #${header}`);\r\n            setLastBlockHeader(header);\r\n        }).then(unsub => {\r\n            unsubscribeAll = unsub;\r\n        }).catch(console.error);\r\n\r\n        return () => unsubscribeAll && unsubscribeAll();\r\n    }, []);\r\n    \r\n    return(\r\n        <div>\r\n            {lastBlockHeader.number.toNumber()}\r\n            </div>\r\n    );\r\n\r\n}\r\n\r\nexport default function BlockInfo(props){\r\n    const{api} = useSubstrate();\r\n    return api.rpc &&\r\n    api.rpc.chain &&\r\n    api.rpc.chain.subscribeNewHeads  ? (\r\n        <Main {...props} />\r\n    ) : null;\r\n}"]},"metadata":{},"sourceType":"module"}