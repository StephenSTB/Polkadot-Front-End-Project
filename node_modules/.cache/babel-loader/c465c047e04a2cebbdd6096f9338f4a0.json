{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if ((0, _util.isU8a)(value) || Array.isArray(value)) {\n    return (0, _util.u8aToU8a)(value);\n  } else if ((0, _util.isHex)(value)) {\n    return (0, _util.hexToU8a)(value.toString());\n  } else if ((0, _util.isString)(value)) {\n    return (0, _utilCrypto.decodeAddress)(value.toString());\n  }\n\n  throw new Error('Unknown type passed to AccountId constructor');\n}\n/**\n * @name AccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nvar AccountId = /*#__PURE__*/function (_U8aFixed$default) {\n  _inherits(AccountId, _U8aFixed$default);\n\n  var _super = _createSuper(AccountId);\n\n  function AccountId(registry, value) {\n    _classCallCheck(this, AccountId);\n\n    var decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    (0, _util.assert)(decoded.length >= 32 || !decoded.some(function (b) {\n      return b;\n    }), \"Invalid AccountId provided, expected 32 bytes, found \".concat(decoded.length));\n    return _super.call(this, registry, decoded, 256);\n  }\n\n  _createClass(AccountId, [{\n    key: \"eq\",\n\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    value: function eq(other) {\n      return _get(_getPrototypeOf(AccountId.prototype), \"eq\", this).call(this, decodeAccountId(other));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman() {\n      return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return AccountId.encode(this, this.registry.chainSS58);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return 'AccountId';\n    }\n  }], [{\n    key: \"encode\",\n    value: function encode(value, ss58Format) {\n      return (0, _utilCrypto.encodeAddress)(value, ss58Format);\n    }\n  }]);\n\n  return AccountId;\n}(_U8aFixed.default);\n\nexports.default = AccountId;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/generic/AccountId.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_utilCrypto","_U8aFixed","decodeAccountId","Uint8Array","isU8a","Array","isArray","u8aToU8a","isHex","hexToU8a","toString","isString","decodeAddress","Error","AccountId","registry","decoded","assert","length","some","b","other","toJSON","encode","chainSS58","ss58Format","encodeAddress"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIO,WAAW,GAAGP,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIQ,SAAS,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAtC,C,CAEA;AACA;;AAEA;;;AACA,SAASS,eAAT,CAAyBL,KAAzB,EAAgC;AAC9B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAIM,UAAJ,EAAP;AACD,GAFD,MAEO,IAAI,CAAC,GAAGJ,KAAK,CAACK,KAAV,EAAiBP,KAAjB,KAA2BQ,KAAK,CAACC,OAAN,CAAcT,KAAd,CAA/B,EAAqD;AAC1D,WAAO,CAAC,GAAGE,KAAK,CAACQ,QAAV,EAAoBV,KAApB,CAAP;AACD,GAFM,MAEA,IAAI,CAAC,GAAGE,KAAK,CAACS,KAAV,EAAiBX,KAAjB,CAAJ,EAA6B;AAClC,WAAO,CAAC,GAAGE,KAAK,CAACU,QAAV,EAAoBZ,KAAK,CAACa,QAAN,EAApB,CAAP;AACD,GAFM,MAEA,IAAI,CAAC,GAAGX,KAAK,CAACY,QAAV,EAAoBd,KAApB,CAAJ,EAAgC;AACrC,WAAO,CAAC,GAAGG,WAAW,CAACY,aAAhB,EAA+Bf,KAAK,CAACa,QAAN,EAA/B,CAAP;AACD;;AAED,QAAM,IAAIG,KAAJ,CAAU,8CAAV,CAAN;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;IAGMC,S;;;;;AACJ,qBAAYC,QAAZ,EAAsBlB,KAAtB,EAA6B;AAAA;;AAC3B,QAAMmB,OAAO,GAAGd,eAAe,CAACL,KAAD,CAA/B,CAD2B,CACa;;AAExC,KAAC,GAAGE,KAAK,CAACkB,MAAV,EAAkBD,OAAO,CAACE,MAAR,IAAkB,EAAlB,IAAwB,CAACF,OAAO,CAACG,IAAR,CAAa,UAAAC,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAAd,CAA3C,iEAAyHJ,OAAO,CAACE,MAAjI;AAH2B,6BAIrBH,QAJqB,EAIXC,OAJW,EAIF,GAJE;AAK5B;;;;;AAKD;AACF;AACA;uBAGKK,K,EAAO;AACR,+EAAgBnB,eAAe,CAACmB,KAAD,CAA/B;AACD;AACD;AACF;AACA;;;;8BAGY;AACR,aAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;;6BAGW;AACP,aAAO,KAAKZ,QAAL,EAAP;AACD;AACD;AACF;AACA;;;;+BAGa;AACT,aAAOI,SAAS,CAACS,MAAV,CAAiB,IAAjB,EAAuB,KAAKR,QAAL,CAAcS,SAArC,CAAP;AACD;AACD;AACF;AACA;;;;gCAGc;AACV,aAAO,WAAP;AACD;;;2BA1Ca3B,K,EAAO4B,U,EAAY;AAC/B,aAAO,CAAC,GAAGzB,WAAW,CAAC0B,aAAhB,EAA+B7B,KAA/B,EAAsC4B,UAAtC,CAAP;AACD;;;;EAVqBxB,SAAS,CAACH,O;;AAsDlCF,OAAO,CAACE,OAAR,GAAkBgB,SAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _U8aFixed = _interopRequireDefault(require(\"../codec/U8aFixed\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeAccountId(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if ((0, _util.isU8a)(value) || Array.isArray(value)) {\n    return (0, _util.u8aToU8a)(value);\n  } else if ((0, _util.isHex)(value)) {\n    return (0, _util.hexToU8a)(value.toString());\n  } else if ((0, _util.isString)(value)) {\n    return (0, _utilCrypto.decodeAddress)(value.toString());\n  }\n\n  throw new Error('Unknown type passed to AccountId constructor');\n}\n/**\n * @name AccountId\n * @description\n * A wrapper around an AccountId/PublicKey representation. Since we are dealing with\n * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is\n * just a Uint8Array wrapper with a fixed length.\n */\n\n\nclass AccountId extends _U8aFixed.default {\n  constructor(registry, value) {\n    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)\n\n    (0, _util.assert)(decoded.length >= 32 || !decoded.some(b => b), `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);\n    super(registry, decoded, 256);\n  }\n\n  static encode(value, ss58Format) {\n    return (0, _utilCrypto.encodeAddress)(value, ss58Format);\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return super.eq(decodeAccountId(other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return AccountId.encode(this, this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountId';\n  }\n\n}\n\nexports.default = AccountId;"]},"metadata":{},"sourceType":"script"}