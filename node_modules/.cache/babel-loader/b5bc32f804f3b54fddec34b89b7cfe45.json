{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.format = format;\nexports.default = logger;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _formatDate = _interopRequireDefault(require(\"./format/formatDate\"));\n\nvar _bn = _interopRequireDefault(require(\"./is/bn\"));\n\nvar _buffer = _interopRequireDefault(require(\"./is/buffer\"));\n\nvar _function = _interopRequireDefault(require(\"./is/function\"));\n\nvar _object = _interopRequireDefault(require(\"./is/object\"));\n\nvar _u8a = _interopRequireDefault(require(\"./is/u8a\"));\n\nvar _toHex = _interopRequireDefault(require(\"./u8a/toHex\")); // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar logTo = {\n  debug: 'log',\n  error: 'error',\n  log: 'log',\n  warn: 'warn'\n};\nvar chalked = {\n  debug: _chalk.default.gray,\n  error: _chalk.default.red,\n  log: _chalk.default.reset,\n  warn: _chalk.default.yellow\n};\n\nfunction formatObject(value) {\n  var result = {};\n  return Object.keys(value).reduce(function (result, key) {\n    result[key] = format(value[key]);\n    return result;\n  }, result);\n}\n\nfunction format(value) {\n  if (Array.isArray(value)) {\n    return value.map(format);\n  }\n\n  if ((0, _bn.default)(value)) {\n    return value.toString();\n  }\n\n  if ((0, _buffer.default)(value)) {\n    return \"0x\".concat(value.toString('hex'));\n  }\n\n  if ((0, _u8a.default)(value)) {\n    return (0, _toHex.default)(value);\n  }\n\n  if (value && (0, _object.default)(value) && value.constructor === Object) {\n    return formatObject(value);\n  }\n\n  return value;\n}\n\nfunction apply(log, type, values) {\n  var _console;\n\n  if (values.length === 1 && (0, _function.default)(values[0])) {\n    var fnResult = values[0]();\n    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult]);\n  }\n\n  var chalk = function chalk(value) {\n    return chalked[log](value);\n  };\n\n  (_console = console)[logTo[log]].apply(_console, [chalk((0, _formatDate.default)(new Date())), chalk(type)].concat(_toConsumableArray(values.map(format))));\n}\n\nfunction noop() {// noop\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * const l from '@polkadot/util/logger')('test');\n *\n * l.log('blah'); // <date>     TEST: blah\n * ```\n */\n\n\nfunction logger(_type) {\n  var type = \"\".concat(_type.toUpperCase(), \":\").padStart(16);\n  var isDebug;\n\n  try {\n    var isTest = process.env.NODE_ENV === 'test';\n    var debugList = (process.env.DEBUG || '').split(',');\n    isDebug = isTest || !!debugList.find(function (entry) {\n      return _type.startsWith(entry);\n    });\n  } catch (error) {\n    isDebug = false;\n  }\n\n  return {\n    debug: isDebug ? function () {\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      return apply('debug', type, values);\n    } : noop,\n    error: function error() {\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      return apply('error', type, values);\n    },\n    log: function log() {\n      for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        values[_key3] = arguments[_key3];\n      }\n\n      return apply('log', type, values);\n    },\n    noop: noop,\n    warn: function warn() {\n      for (var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        values[_key4] = arguments[_key4];\n      }\n\n      return apply('warn', type, values);\n    }\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util/logger.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","format","default","logger","_chalk","_formatDate","_bn","_buffer","_function","_object","_u8a","_toHex","logTo","debug","error","log","warn","chalked","gray","red","reset","yellow","formatObject","result","keys","reduce","key","Array","isArray","map","toString","constructor","apply","type","values","length","fnResult","chalk","console","Date","noop","_type","toUpperCase","padStart","isDebug","isTest","process","env","NODE_ENV","debugList","DEBUG","split","find","entry","startsWith"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.format = format;\nexports.default = logger;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _formatDate = _interopRequireDefault(require(\"./format/formatDate\"));\n\nvar _bn = _interopRequireDefault(require(\"./is/bn\"));\n\nvar _buffer = _interopRequireDefault(require(\"./is/buffer\"));\n\nvar _function = _interopRequireDefault(require(\"./is/function\"));\n\nvar _object = _interopRequireDefault(require(\"./is/object\"));\n\nvar _u8a = _interopRequireDefault(require(\"./is/u8a\"));\n\nvar _toHex = _interopRequireDefault(require(\"./u8a/toHex\"));\n\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst logTo = {\n  debug: 'log',\n  error: 'error',\n  log: 'log',\n  warn: 'warn'\n};\nconst chalked = {\n  debug: _chalk.default.gray,\n  error: _chalk.default.red,\n  log: _chalk.default.reset,\n  warn: _chalk.default.yellow\n};\n\nfunction formatObject(value) {\n  const result = {};\n  return Object.keys(value).reduce((result, key) => {\n    result[key] = format(value[key]);\n    return result;\n  }, result);\n}\n\nfunction format(value) {\n  if (Array.isArray(value)) {\n    return value.map(format);\n  }\n\n  if ((0, _bn.default)(value)) {\n    return value.toString();\n  }\n\n  if ((0, _buffer.default)(value)) {\n    return `0x${value.toString('hex')}`;\n  }\n\n  if ((0, _u8a.default)(value)) {\n    return (0, _toHex.default)(value);\n  }\n\n  if (value && (0, _object.default)(value) && value.constructor === Object) {\n    return formatObject(value);\n  }\n\n  return value;\n}\n\nfunction apply(log, type, values) {\n  if (values.length === 1 && (0, _function.default)(values[0])) {\n    const fnResult = values[0]();\n    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult]);\n  }\n\n  const chalk = value => chalked[log](value);\n\n  console[logTo[log]](chalk((0, _formatDate.default)(new Date())), chalk(type), ...values.map(format));\n}\n\nfunction noop() {// noop\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * const l from '@polkadot/util/logger')('test');\n *\n * l.log('blah'); // <date>     TEST: blah\n * ```\n */\n\n\nfunction logger(_type) {\n  const type = `${_type.toUpperCase()}:`.padStart(16);\n  let isDebug;\n\n  try {\n    const isTest = process.env.NODE_ENV === 'test';\n    const debugList = (process.env.DEBUG || '').split(',');\n    isDebug = isTest || !!debugList.find(entry => _type.startsWith(entry));\n  } catch (error) {\n    isDebug = false;\n  }\n\n  return {\n    debug: isDebug ? (...values) => apply('debug', type, values) : noop,\n    error: (...values) => apply('error', type, values),\n    log: (...values) => apply('log', type, values),\n    noop,\n    warn: (...values) => apply('warn', type, values)\n  };\n}"]},"metadata":{},"sourceType":"script"}