{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.query = query;\nexports.queryMulti = queryMulti;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction parseController(stashId, _ref, stakingLedgerOpt) {\n  var _ref2 = _slicedToArray(_ref, 5),\n      controllerIdOpt = _ref2[0],\n      nominatorsOpt = _ref2[1],\n      rewardDestination = _ref2[2],\n      validatorPrefs = _ref2[3],\n      exposure = _ref2[4];\n\n  var nominators = nominatorsOpt.unwrapOr(null);\n  return {\n    accountId: stashId,\n    controllerId: controllerIdOpt.unwrapOr(null),\n    exposure: exposure,\n    nominators: nominators ? Array.isArray(nominators) ? nominators[0].targets : nominators.targets : [],\n    rewardDestination: rewardDestination,\n    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),\n    stashId: stashId,\n    validatorPrefs: Array.isArray(validatorPrefs) ? validatorPrefs[0] : validatorPrefs\n  };\n}\n\nfunction retrievePrev(api, stashId) {\n  return api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.validators, stashId], [api.query.staking.stakers, stashId]]);\n}\n\nfunction retrieveCurr(api, stashIds, activeEra) {\n  return (0, _rxjs.combineLatest)([api.query.staking.bonded.multi(stashIds), api.query.staking.nominators ? api.query.staking.nominators.multi(stashIds) : (0, _rxjs.of)(stashIds.map(function () {\n    return api.registry.createType('Option<Nominations>');\n  })), api.query.staking.payee.multi(stashIds), api.query.staking.validators.multi(stashIds), api.query.staking.erasStakers.multi(stashIds.map(function (stashId) {\n    return [activeEra, stashId];\n  }))]).pipe((0, _operators.map)(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 5),\n        controllerIdOpt = _ref4[0],\n        nominatorsOpt = _ref4[1],\n        rewardDestination = _ref4[2],\n        validatorPrefs = _ref4[3],\n        exposure = _ref4[4];\n\n    return controllerIdOpt.map(function (controllerIdOpt, index) {\n      return [controllerIdOpt, nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index]];\n    });\n  }));\n}\n\nfunction retrieveControllers(api, optControllerIds) {\n  var ids = optControllerIds.filter(function (opt) {\n    return opt.isSome;\n  }).map(function (opt) {\n    return opt.unwrap();\n  });\n\n  if (!ids.length) {\n    return (0, _rxjs.of)(optControllerIds.map(function () {\n      return api.registry.createType('Option<StakingLedger>');\n    }));\n  }\n\n  return api.query.staking.ledger.multi(ids).pipe((0, _operators.map)(function (optLedgers) {\n    var offset = -1;\n    return optControllerIds.map(function (opt) {\n      return opt.isSome ? optLedgers[++offset] : api.registry.createType('Option<StakingLedger>');\n    });\n  }));\n}\n/**\n * @description From a stash, retrieve the controllerId and all relevant details\n */\n\n\nfunction query(instanceId, api) {\n  return (0, _util2.memo)(instanceId, function (accountId) {\n    return api.derive.staking.queryMulti([accountId]).pipe((0, _operators.map)(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          first = _ref6[0];\n\n      return first;\n    }));\n  });\n}\n\nfunction queryMulti(instanceId, api) {\n  return (0, _util2.memo)(instanceId, function (accountIds) {\n    return accountIds.length ? api.derive.session.indexes().pipe((0, _operators.switchMap)(function (_ref7) {\n      var activeEra = _ref7.activeEra;\n      var stashIds = accountIds.map(function (accountId) {\n        return api.registry.createType('AccountId', accountId);\n      });\n      return ((0, _util.isFunction)(api.query.staking.erasStakers) ? retrieveCurr(api, stashIds, activeEra) : (0, _rxjs.combineLatest)(stashIds.map(function (stashId) {\n        return retrievePrev(api, stashId);\n      }))).pipe((0, _operators.switchMap)(function (results) {\n        return retrieveControllers(api, results.map(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 1),\n              optController = _ref9[0];\n\n          return optController;\n        })).pipe((0, _operators.map)(function (stakingLedgerOpts) {\n          return stashIds.map(function (stashId, index) {\n            return parseController(stashId, results[index], stakingLedgerOpts[index]);\n          });\n        }));\n      }));\n    })) : (0, _rxjs.of)([]);\n  });\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/query.js"],"names":["Object","defineProperty","exports","value","query","queryMulti","_rxjs","require","_operators","_util","_util2","parseController","stashId","stakingLedgerOpt","controllerIdOpt","nominatorsOpt","rewardDestination","validatorPrefs","exposure","nominators","unwrapOr","accountId","controllerId","Array","isArray","targets","stakingLedger","unwrapOrDefault","retrievePrev","api","staking","bonded","payee","validators","stakers","retrieveCurr","stashIds","activeEra","combineLatest","multi","of","map","registry","createType","erasStakers","pipe","index","retrieveControllers","optControllerIds","ids","filter","opt","isSome","unwrap","length","ledger","optLedgers","offset","instanceId","memo","derive","first","accountIds","session","indexes","switchMap","isFunction","results","optController","stakingLedgerOpts"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.query = query;\nexports.queryMulti = queryMulti;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction parseController(stashId, [controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure], stakingLedgerOpt) {\n  const nominators = nominatorsOpt.unwrapOr(null);\n  return {\n    accountId: stashId,\n    controllerId: controllerIdOpt.unwrapOr(null),\n    exposure,\n    nominators: nominators ? Array.isArray(nominators) ? nominators[0].targets : nominators.targets : [],\n    rewardDestination,\n    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),\n    stashId,\n    validatorPrefs: Array.isArray(validatorPrefs) ? validatorPrefs[0] : validatorPrefs\n  };\n}\n\nfunction retrievePrev(api, stashId) {\n  return api.queryMulti([[api.query.staking.bonded, stashId], [api.query.staking.nominators, stashId], [api.query.staking.payee, stashId], [api.query.staking.validators, stashId], [api.query.staking.stakers, stashId]]);\n}\n\nfunction retrieveCurr(api, stashIds, activeEra) {\n  return (0, _rxjs.combineLatest)([api.query.staking.bonded.multi(stashIds), api.query.staking.nominators ? api.query.staking.nominators.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => api.registry.createType('Option<Nominations>'))), api.query.staking.payee.multi(stashIds), api.query.staking.validators.multi(stashIds), api.query.staking.erasStakers.multi(stashIds.map(stashId => [activeEra, stashId]))]).pipe((0, _operators.map)(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => controllerIdOpt.map((controllerIdOpt, index) => [controllerIdOpt, nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index]])));\n}\n\nfunction retrieveControllers(api, optControllerIds) {\n  const ids = optControllerIds.filter(opt => opt.isSome).map(opt => opt.unwrap());\n\n  if (!ids.length) {\n    return (0, _rxjs.of)(optControllerIds.map(() => api.registry.createType('Option<StakingLedger>')));\n  }\n\n  return api.query.staking.ledger.multi(ids).pipe((0, _operators.map)(optLedgers => {\n    let offset = -1;\n    return optControllerIds.map(opt => opt.isSome ? optLedgers[++offset] : api.registry.createType('Option<StakingLedger>'));\n  }));\n}\n/**\n * @description From a stash, retrieve the controllerId and all relevant details\n */\n\n\nfunction query(instanceId, api) {\n  return (0, _util2.memo)(instanceId, accountId => api.derive.staking.queryMulti([accountId]).pipe((0, _operators.map)(([first]) => first)));\n}\n\nfunction queryMulti(instanceId, api) {\n  return (0, _util2.memo)(instanceId, accountIds => accountIds.length ? api.derive.session.indexes().pipe((0, _operators.switchMap)(({\n    activeEra\n  }) => {\n    const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));\n    return ((0, _util.isFunction)(api.query.staking.erasStakers) ? retrieveCurr(api, stashIds, activeEra) : (0, _rxjs.combineLatest)(stashIds.map(stashId => retrievePrev(api, stashId)))).pipe((0, _operators.switchMap)(results => retrieveControllers(api, results.map(([optController]) => optController)).pipe((0, _operators.map)(stakingLedgerOpts => stashIds.map((stashId, index) => parseController(stashId, results[index], stakingLedgerOpts[index]))))));\n  })) : (0, _rxjs.of)([]));\n}"]},"metadata":{},"sourceType":"script"}