{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDescriptor;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction createDescriptor(registry, section, sectionIndex, methodIndex, callMetadata) {\n  var callIndex = new Uint8Array([sectionIndex, methodIndex]);\n  var expectedArgs = callMetadata.args;\n  var funcName = (0, _util.stringCamelCase)(callMetadata.name.toString());\n\n  var extrinsicFn = function extrinsicFn() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (0, _util.assert)(expectedArgs.length.valueOf() === args.length, \"Extrinsic \".concat(section, \".\").concat(funcName, \" expects \").concat(expectedArgs.length.valueOf(), \" arguments, got \").concat(args.length, \".\"));\n    return registry.createType('Call', {\n      args: args,\n      callIndex: callIndex\n    }, callMetadata);\n  };\n\n  extrinsicFn.callIndex = callIndex;\n  extrinsicFn.meta = callMetadata;\n  extrinsicFn.method = funcName;\n  extrinsicFn.section = section;\n\n  extrinsicFn.toJSON = function () {\n    return callMetadata.toJSON();\n  };\n\n  return extrinsicFn;\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/metadata/Decorated/extrinsics/fromMetadata/createUnchecked.js"],"names":["Object","defineProperty","exports","value","default","createDescriptor","_util","require","registry","section","sectionIndex","methodIndex","callMetadata","callIndex","Uint8Array","expectedArgs","args","funcName","stringCamelCase","name","toString","extrinsicFn","assert","length","valueOf","createType","meta","method","toJSON"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gBAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;AAEA;;;AACA,SAASF,gBAAT,CAA0BG,QAA1B,EAAoCC,OAApC,EAA6CC,YAA7C,EAA2DC,WAA3D,EAAwEC,YAAxE,EAAsF;AACpF,MAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAe,CAACJ,YAAD,EAAeC,WAAf,CAAf,CAAlB;AACA,MAAMI,YAAY,GAAGH,YAAY,CAACI,IAAlC;AACA,MAAMC,QAAQ,GAAG,CAAC,GAAGX,KAAK,CAACY,eAAV,EAA2BN,YAAY,CAACO,IAAb,CAAkBC,QAAlB,EAA3B,CAAjB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAa;AAAA,sCAATL,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAC/B,KAAC,GAAGV,KAAK,CAACgB,MAAV,EAAkBP,YAAY,CAACQ,MAAb,CAAoBC,OAApB,OAAkCR,IAAI,CAACO,MAAzD,sBAA8Ed,OAA9E,cAAyFQ,QAAzF,sBAA6GF,YAAY,CAACQ,MAAb,CAAoBC,OAApB,EAA7G,6BAA6JR,IAAI,CAACO,MAAlK;AACA,WAAOf,QAAQ,CAACiB,UAAT,CAAoB,MAApB,EAA4B;AACjCT,MAAAA,IAAI,EAAJA,IADiC;AAEjCH,MAAAA,SAAS,EAATA;AAFiC,KAA5B,EAGJD,YAHI,CAAP;AAID,GAND;;AAQAS,EAAAA,WAAW,CAACR,SAAZ,GAAwBA,SAAxB;AACAQ,EAAAA,WAAW,CAACK,IAAZ,GAAmBd,YAAnB;AACAS,EAAAA,WAAW,CAACM,MAAZ,GAAqBV,QAArB;AACAI,EAAAA,WAAW,CAACZ,OAAZ,GAAsBA,OAAtB;;AAEAY,EAAAA,WAAW,CAACO,MAAZ,GAAqB;AAAA,WAAMhB,YAAY,CAACgB,MAAb,EAAN;AAAA,GAArB;;AAEA,SAAOP,WAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDescriptor;\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction createDescriptor(registry, section, sectionIndex, methodIndex, callMetadata) {\n  const callIndex = new Uint8Array([sectionIndex, methodIndex]);\n  const expectedArgs = callMetadata.args;\n  const funcName = (0, _util.stringCamelCase)(callMetadata.name.toString());\n\n  const extrinsicFn = (...args) => {\n    (0, _util.assert)(expectedArgs.length.valueOf() === args.length, `Extrinsic ${section}.${funcName} expects ${expectedArgs.length.valueOf()} arguments, got ${args.length}.`);\n    return registry.createType('Call', {\n      args,\n      callIndex\n    }, callMetadata);\n  };\n\n  extrinsicFn.callIndex = callIndex;\n  extrinsicFn.meta = callMetadata;\n  extrinsicFn.method = funcName;\n  extrinsicFn.section = section;\n\n  extrinsicFn.toJSON = () => callMetadata.toJSON();\n\n  return extrinsicFn;\n}"]},"metadata":{},"sourceType":"script"}