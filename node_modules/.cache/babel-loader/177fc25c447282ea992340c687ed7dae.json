{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = encode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _encode = _interopRequireDefault(require(\"../base58/encode\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _defaults = _interopRequireDefault(require(\"./defaults\"));\n\nvar _sshash = _interopRequireDefault(require(\"./sshash\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34\n\n\nfunction encode(_key) {\n  var ss58Format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _defaults.default.prefix;\n  // decode it, this means we can re-encode an address\n  var key = (0, _decode.default)(_key);\n  (0, _util.assert)(_defaults.default.allowedDecodedLengths.includes(key.length), \"Expected a valid key to convert, with length \".concat(_defaults.default.allowedDecodedLengths.join(', ')));\n  var isPublicKey = [32, 33].includes(key.length);\n  var input = (0, _util.u8aConcat)(new Uint8Array([ss58Format]), key);\n  var hash = (0, _sshash.default)(input);\n  return (0, _encode.default)((0, _util.u8aConcat)(input, hash.subarray(0, isPublicKey ? 2 : 1)));\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util-crypto/address/encode.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","encode","_util","_encode","_decode","_defaults","_sshash","_key","ss58Format","prefix","key","assert","allowedDecodedLengths","includes","length","join","isPublicKey","input","u8aConcat","Uint8Array","hash","subarray"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAApC;;AAEA,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIU,SAAS,GAAGX,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAIW,OAAO,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC,C,CAEA;AACA;AACA;;;AACA,SAASM,MAAT,CAAgBM,IAAhB,EAA6D;AAAA,MAAvCC,UAAuC,uEAA1BH,SAAS,CAACL,OAAV,CAAkBS,MAAQ;AAC3D;AACA,MAAMC,GAAG,GAAG,CAAC,GAAGN,OAAO,CAACJ,OAAZ,EAAqBO,IAArB,CAAZ;AACA,GAAC,GAAGL,KAAK,CAACS,MAAV,EAAkBN,SAAS,CAACL,OAAV,CAAkBY,qBAAlB,CAAwCC,QAAxC,CAAiDH,GAAG,CAACI,MAArD,CAAlB,yDAAgIT,SAAS,CAACL,OAAV,CAAkBY,qBAAlB,CAAwCG,IAAxC,CAA6C,IAA7C,CAAhI;AACA,MAAMC,WAAW,GAAG,CAAC,EAAD,EAAK,EAAL,EAASH,QAAT,CAAkBH,GAAG,CAACI,MAAtB,CAApB;AACA,MAAMG,KAAK,GAAG,CAAC,GAAGf,KAAK,CAACgB,SAAV,EAAqB,IAAIC,UAAJ,CAAe,CAACX,UAAD,CAAf,CAArB,EAAmDE,GAAnD,CAAd;AACA,MAAMU,IAAI,GAAG,CAAC,GAAGd,OAAO,CAACN,OAAZ,EAAqBiB,KAArB,CAAb;AACA,SAAO,CAAC,GAAGd,OAAO,CAACH,OAAZ,EAAqB,CAAC,GAAGE,KAAK,CAACgB,SAAV,EAAqBD,KAArB,EAA4BG,IAAI,CAACC,QAAL,CAAc,CAAd,EAAiBL,WAAW,GAAG,CAAH,GAAO,CAAnC,CAA5B,CAArB,CAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = encode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _encode = _interopRequireDefault(require(\"../base58/encode\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _defaults = _interopRequireDefault(require(\"./defaults\"));\n\nvar _sshash = _interopRequireDefault(require(\"./sshash\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34\nfunction encode(_key, ss58Format = _defaults.default.prefix) {\n  // decode it, this means we can re-encode an address\n  const key = (0, _decode.default)(_key);\n  (0, _util.assert)(_defaults.default.allowedDecodedLengths.includes(key.length), `Expected a valid key to convert, with length ${_defaults.default.allowedDecodedLengths.join(', ')}`);\n  const isPublicKey = [32, 33].includes(key.length);\n  const input = (0, _util.u8aConcat)(new Uint8Array([ss58Format]), key);\n  const hash = (0, _sshash.default)(input);\n  return (0, _encode.default)((0, _util.u8aConcat)(input, hash.subarray(0, isPublicKey ? 2 : 1)));\n}"]},"metadata":{},"sourceType":"script"}