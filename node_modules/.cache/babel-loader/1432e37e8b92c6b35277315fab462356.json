{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractStorageArgs = extractStorageArgs;\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction sig(_ref) {\n  var method = _ref.method,\n      section = _ref.section;\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return \"\".concat(section, \".\").concat(method, \"(\").concat(args.join(', '), \")\");\n}\n\nfunction doDoubleMap(creator, args) {\n  var _creator$meta$type$as = creator.meta.type.asDoubleMap,\n      key1 = _creator$meta$type$as.key1,\n      key2 = _creator$meta$type$as.key2;\n  (0, _util.assert)(args.length === 2, \"\".concat(sig(creator, key1, key2), \" is a doublemap, requiring 2 arguments, \").concat(args.length, \" found\")); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  var key = creator.meta.type.asMap.key;\n  (0, _util.assert)(args.length === 1, \"\".concat(sig(creator, key), \" is a map, requiring 1 argument, \").concat(args.length, \" found\")); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nfunction extractStorageArgs(creator, _args) {\n  var args = _args.filter(function (arg) {\n    return !(0, _util.isUndefined)(arg);\n  });\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  }\n\n  (0, _util.assert)(args.length === 0, \"\".concat(sig(creator), \" does not take any arguments, \").concat(args.length, \" found\")); // no args\n\n  return [creator];\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api/util/validate.js"],"names":["Object","defineProperty","exports","value","extractStorageArgs","_util","require","sig","method","section","args","join","doDoubleMap","creator","meta","type","asDoubleMap","key1","key2","assert","length","doMap","key","asMap","_args","filter","arg","isUndefined","isDoubleMap","isMap"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASC,GAAT,OAGY;AAAA,MAFVC,MAEU,QAFVA,MAEU;AAAA,MADVC,OACU,QADVA,OACU;;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACV,mBAAUD,OAAV,cAAqBD,MAArB,cAA+BE,IAAI,CAACC,IAAL,CAAU,IAAV,CAA/B;AACD;;AAED,SAASC,WAAT,CAAqBC,OAArB,EAA8BH,IAA9B,EAAoC;AAAA,8BAI9BG,OAAO,CAACC,IAAR,CAAaC,IAAb,CAAkBC,WAJY;AAAA,MAEhCC,IAFgC,yBAEhCA,IAFgC;AAAA,MAGhCC,IAHgC,yBAGhCA,IAHgC;AAKlC,GAAC,GAAGb,KAAK,CAACc,MAAV,EAAkBT,IAAI,CAACU,MAAL,KAAgB,CAAlC,YAAwCb,GAAG,CAACM,OAAD,EAAUI,IAAV,EAAgBC,IAAhB,CAA3C,qDAA2GR,IAAI,CAACU,MAAhH,aALkC,CAK+F;;AAEjI,SAAO,CAACP,OAAD,EAAUH,IAAV,CAAP;AACD;;AAED,SAASW,KAAT,CAAeR,OAAf,EAAwBH,IAAxB,EAA8B;AAAA,MAE1BY,GAF0B,GAGxBT,OAAO,CAACC,IAAR,CAAaC,IAAb,CAAkBQ,KAHM,CAE1BD,GAF0B;AAI5B,GAAC,GAAGjB,KAAK,CAACc,MAAV,EAAkBT,IAAI,CAACU,MAAL,KAAgB,CAAlC,YAAwCb,GAAG,CAACM,OAAD,EAAUS,GAAV,CAA3C,8CAA6FZ,IAAI,CAACU,MAAlG,aAJ4B,CAIuF;;AAEnH,SAAOV,IAAI,CAACU,MAAL,GAAc,CAACP,OAAD,EAAUH,IAAI,CAAC,CAAD,CAAd,CAAd,GAAmC,CAACG,OAAD,CAA1C;AACD,C,CAAC;AACF;;;AAGA,SAAST,kBAAT,CAA4BS,OAA5B,EAAqCW,KAArC,EAA4C;AAC1C,MAAMd,IAAI,GAAGc,KAAK,CAACC,MAAN,CAAa,UAAAC,GAAG;AAAA,WAAI,CAAC,CAAC,GAAGrB,KAAK,CAACsB,WAAV,EAAuBD,GAAvB,CAAL;AAAA,GAAhB,CAAb;;AAEA,MAAIb,OAAO,CAACC,IAAR,CAAaC,IAAb,CAAkBa,WAAtB,EAAmC;AACjC,WAAOhB,WAAW,CAACC,OAAD,EAAUH,IAAV,CAAlB;AACD,GAFD,MAEO,IAAIG,OAAO,CAACC,IAAR,CAAaC,IAAb,CAAkBc,KAAtB,EAA6B;AAClC,WAAOR,KAAK,CAACR,OAAD,EAAUH,IAAV,CAAZ;AACD;;AAED,GAAC,GAAGL,KAAK,CAACc,MAAV,EAAkBT,IAAI,CAACU,MAAL,KAAgB,CAAlC,YAAwCb,GAAG,CAACM,OAAD,CAA3C,2CAAqFH,IAAI,CAACU,MAA1F,aAT0C,CASiE;;AAE3G,SAAO,CAACP,OAAD,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractStorageArgs = extractStorageArgs;\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction sig({\n  method,\n  section\n}, ...args) {\n  return `${section}.${method}(${args.join(', ')})`;\n}\n\nfunction doDoubleMap(creator, args) {\n  const {\n    key1,\n    key2\n  } = creator.meta.type.asDoubleMap;\n  (0, _util.assert)(args.length === 2, `${sig(creator, key1, key2)} is a doublemap, requiring 2 arguments, ${args.length} found`); // pass as tuple\n\n  return [creator, args];\n}\n\nfunction doMap(creator, args) {\n  const {\n    key\n  } = creator.meta.type.asMap;\n  (0, _util.assert)(args.length === 1, `${sig(creator, key)} is a map, requiring 1 argument, ${args.length} found`); // expand\n\n  return args.length ? [creator, args[0]] : [creator];\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nfunction extractStorageArgs(creator, _args) {\n  const args = _args.filter(arg => !(0, _util.isUndefined)(arg));\n\n  if (creator.meta.type.isDoubleMap) {\n    return doDoubleMap(creator, args);\n  } else if (creator.meta.type.isMap) {\n    return doMap(creator, args);\n  }\n\n  (0, _util.assert)(args.length === 0, `${sig(creator)} does not take any arguments, ${args.length} found`); // no args\n\n  return [creator];\n}"]},"metadata":{},"sourceType":"script"}