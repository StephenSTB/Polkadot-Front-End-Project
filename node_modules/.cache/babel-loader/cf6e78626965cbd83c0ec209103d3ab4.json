{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribeNewBlocks = subscribeNewBlocks;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name subscribeNewBlocks\n * @returns The latest block & events for that block\n */\n\n\nfunction subscribeNewBlocks(instanceId, api) {\n  return (0, _util.memo)(instanceId, function () {\n    return api.derive.chain.subscribeNewHeads().pipe((0, _operators.switchMap)(function (header) {\n      var blockHash = header.hash;\n      return (0, _rxjs.combineLatest)((0, _rxjs.of)(blockHash), api.query.system.events.at(blockHash), api.rpc.chain.getBlock(header.hash));\n    }), (0, _operators.map)(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 3),\n          blockHash = _ref2[0],\n          events = _ref2[1],\n          block = _ref2[2];\n\n      return {\n        block: block.block,\n        blockHash: blockHash,\n        blockNumber: block.block.header.number.unwrap(),\n        events: events,\n        justification: block.justification\n      };\n    }));\n  });\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js"],"names":["Object","defineProperty","exports","value","subscribeNewBlocks","_rxjs","require","_operators","_util","instanceId","api","memo","derive","chain","subscribeNewHeads","pipe","switchMap","header","blockHash","hash","combineLatest","of","query","system","events","at","rpc","getBlock","map","block","blockNumber","number","unwrap","justification"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,SAASF,kBAAT,CAA4BK,UAA5B,EAAwCC,GAAxC,EAA6C;AAC3C,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4B;AAAA,WAAMC,GAAG,CAACE,MAAJ,CAAWC,KAAX,CAAiBC,iBAAjB,GAAqCC,IAArC,CAA0C,CAAC,GAAGR,UAAU,CAACS,SAAf,EAA0B,UAAAC,MAAM,EAAI;AACrH,UAAMC,SAAS,GAAGD,MAAM,CAACE,IAAzB;AACA,aAAO,CAAC,GAAGd,KAAK,CAACe,aAAV,EAAyB,CAAC,GAAGf,KAAK,CAACgB,EAAV,EAAcH,SAAd,CAAzB,EAAmDR,GAAG,CAACY,KAAJ,CAAUC,MAAV,CAAiBC,MAAjB,CAAwBC,EAAxB,CAA2BP,SAA3B,CAAnD,EAA0FR,GAAG,CAACgB,GAAJ,CAAQb,KAAR,CAAcc,QAAd,CAAuBV,MAAM,CAACE,IAA9B,CAA1F,CAAP;AACD,KAHkF,CAA1C,EAGrC,CAAC,GAAGZ,UAAU,CAACqB,GAAf,EAAoB;AAAA;AAAA,UAAEV,SAAF;AAAA,UAAaM,MAAb;AAAA,UAAqBK,KAArB;;AAAA,aAAiC;AACvDA,QAAAA,KAAK,EAAEA,KAAK,CAACA,KAD0C;AAEvDX,QAAAA,SAAS,EAATA,SAFuD;AAGvDY,QAAAA,WAAW,EAAED,KAAK,CAACA,KAAN,CAAYZ,MAAZ,CAAmBc,MAAnB,CAA0BC,MAA1B,EAH0C;AAIvDR,QAAAA,MAAM,EAANA,MAJuD;AAKvDS,QAAAA,aAAa,EAAEJ,KAAK,CAACI;AALkC,OAAjC;AAAA,KAApB,CAHqC,CAAN;AAAA,GAA5B,CAAP;AAUD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribeNewBlocks = subscribeNewBlocks;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name subscribeNewBlocks\n * @returns The latest block & events for that block\n */\nfunction subscribeNewBlocks(instanceId, api) {\n  return (0, _util.memo)(instanceId, () => api.derive.chain.subscribeNewHeads().pipe((0, _operators.switchMap)(header => {\n    const blockHash = header.hash;\n    return (0, _rxjs.combineLatest)((0, _rxjs.of)(blockHash), api.query.system.events.at(blockHash), api.rpc.chain.getBlock(header.hash));\n  }), (0, _operators.map)(([blockHash, events, block]) => ({\n    block: block.block,\n    blockHash,\n    blockNumber: block.block.header.number.unwrap(),\n    events,\n    justification: block.justification\n  }))));\n}"]},"metadata":{},"sourceType":"script"}