{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nvar recordIdentity = function recordIdentity(record) {\n  return record;\n};\n\nfunction filterAndApply(events, section, methods, onFound) {\n  return events.filter(function (_ref) {\n    var event = _ref.event;\n    return section === event.section && methods.includes(event.method);\n  }).map(function (record) {\n    return onFound(record);\n  });\n}\n\nfunction extractError() {\n  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return filterAndApply(events, 'system', ['ExtrinsicFailed'], function (_ref2) {\n    var data = _ref2.event.data;\n    return data[0];\n  })[0];\n}\n\nfunction extractInfo() {\n  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], function (_ref3) {\n    var _ref3$event = _ref3.event,\n        data = _ref3$event.data,\n        method = _ref3$event.method;\n    return method === 'ExtrinsicSuccess' ? data[0] : data[1];\n  })[0];\n}\n\nvar SubmittableResult = /*#__PURE__*/function () {\n  function SubmittableResult(_ref4) {\n    var dispatchError = _ref4.dispatchError,\n        dispatchInfo = _ref4.dispatchInfo,\n        events = _ref4.events,\n        status = _ref4.status;\n\n    _classCallCheck(this, SubmittableResult);\n\n    this.dispatchError = void 0;\n    this.dispatchInfo = void 0;\n    this.events = void 0;\n    this.status = void 0;\n    this.dispatchError = dispatchError || extractError(events);\n    this.dispatchInfo = dispatchInfo || extractInfo(events);\n    this.events = events || [];\n    this.status = status;\n  }\n\n  _createClass(SubmittableResult, [{\n    key: \"filterRecords\",\n\n    /**\n     * @description Filters EventRecords for the specified method & section (there could be multiple)\n     */\n    value: function filterRecords(section, method) {\n      return filterAndApply(this.events, section, [method], recordIdentity);\n    }\n    /**\n     * @description Finds an EventRecord for the specified method & section\n     */\n\n  }, {\n    key: \"findRecord\",\n    value: function findRecord(section, method) {\n      return this.filterRecords(section, method)[0];\n    }\n    /**\n     * @description Creates a human representation of the output\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      var _this$dispatchError, _this$dispatchInfo;\n\n      return {\n        dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),\n        dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),\n        events: this.events.map(function (event) {\n          return event.toHuman(isExtended);\n        }),\n        status: this.status.toHuman(isExtended)\n      };\n    }\n  }, {\n    key: \"isCompleted\",\n    get: function get() {\n      return this.isError || this.status.isInBlock || this.status.isFinalized;\n    }\n  }, {\n    key: \"isError\",\n    get: function get() {\n      return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n    }\n  }, {\n    key: \"isFinalized\",\n    get: function get() {\n      return this.status.isFinalized;\n    }\n  }, {\n    key: \"isInBlock\",\n    get: function get() {\n      return this.status.isInBlock;\n    }\n  }, {\n    key: \"isWarning\",\n    get: function get() {\n      return this.status.isRetracted;\n    }\n  }]);\n\n  return SubmittableResult;\n}();\n\nexports.default = SubmittableResult;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api/submittable/Result.js"],"names":["Object","defineProperty","exports","value","default","recordIdentity","record","filterAndApply","events","section","methods","onFound","filter","event","includes","method","map","extractError","data","extractInfo","SubmittableResult","dispatchError","dispatchInfo","status","filterRecords","isExtended","_this$dispatchError","_this$dispatchInfo","toHuman","isError","isInBlock","isFinalized","isDropped","isFinalityTimeout","isInvalid","isUsurped","isRetracted"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Copyright 2017-2020 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst recordIdentity = record => record;\n\nfunction filterAndApply(events, section, methods, onFound) {\n  return events.filter(({\n    event\n  }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));\n}\n\nfunction extractError(events = []) {\n  return filterAndApply(events, 'system', ['ExtrinsicFailed'], ({\n    event: {\n      data\n    }\n  }) => data[0])[0];\n}\n\nfunction extractInfo(events = []) {\n  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], ({\n    event: {\n      data,\n      method\n    }\n  }) => method === 'ExtrinsicSuccess' ? data[0] : data[1])[0];\n}\n\nclass SubmittableResult {\n  constructor({\n    dispatchError,\n    dispatchInfo,\n    events,\n    status\n  }) {\n    this.dispatchError = void 0;\n    this.dispatchInfo = void 0;\n    this.events = void 0;\n    this.status = void 0;\n    this.dispatchError = dispatchError || extractError(events);\n    this.dispatchInfo = dispatchInfo || extractInfo(events);\n    this.events = events || [];\n    this.status = status;\n  }\n\n  get isCompleted() {\n    return this.isError || this.status.isInBlock || this.status.isFinalized;\n  }\n\n  get isError() {\n    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n  }\n\n  get isFinalized() {\n    return this.status.isFinalized;\n  }\n\n  get isInBlock() {\n    return this.status.isInBlock;\n  }\n\n  get isWarning() {\n    return this.status.isRetracted;\n  }\n  /**\n   * @description Filters EventRecords for the specified method & section (there could be multiple)\n   */\n\n\n  filterRecords(section, method) {\n    return filterAndApply(this.events, section, [method], recordIdentity);\n  }\n  /**\n   * @description Finds an EventRecord for the specified method & section\n   */\n\n\n  findRecord(section, method) {\n    return this.filterRecords(section, method)[0];\n  }\n  /**\n   * @description Creates a human representation of the output\n   */\n\n\n  toHuman(isExtended) {\n    var _this$dispatchError, _this$dispatchInfo;\n\n    return {\n      dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),\n      dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),\n      events: this.events.map(event => event.toHuman(isExtended)),\n      status: this.status.toHuman(isExtended)\n    };\n  }\n\n}\n\nexports.default = SubmittableResult;"]},"metadata":{},"sourceType":"script"}