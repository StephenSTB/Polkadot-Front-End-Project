{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flattenUniq; // Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\nfunction flattenUniq(list) {\n  var flat = list.reduce(function (result, entry) {\n    return result.concat(Array.isArray(entry) ? flattenUniq(entry) : entry);\n  }, []);\n  return _toConsumableArray(new Set(flat)).filter(function (value) {\n    return value;\n  }).sort();\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/metadata/Metadata/util/flattenUniq.js"],"names":["Object","defineProperty","exports","value","default","flattenUniq","list","flat","reduce","result","entry","concat","Array","isArray","Set","filter","sort"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,WAAlB,C,CAEA;AACA;;AAEA;;AACA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAMC,IAAI,GAAGD,IAAI,CAACE,MAAL,CAAY,UAACC,MAAD,EAASC,KAAT,EAAmB;AAC1C,WAAOD,MAAM,CAACE,MAAP,CAAcC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBL,WAAW,CAACK,KAAD,CAAlC,GAA4CA,KAA1D,CAAP;AACD,GAFY,EAEV,EAFU,CAAb;AAGA,SAAO,mBAAI,IAAII,GAAJ,CAAQP,IAAR,CAAJ,EAAmBQ,MAAnB,CAA0B,UAAAZ,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAA/B,EAA0Ca,IAA1C,EAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flattenUniq;\n\n// Copyright 2017-2020 @polkadot/metadata authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction flattenUniq(list) {\n  const flat = list.reduce((result, entry) => {\n    return result.concat(Array.isArray(entry) ? flattenUniq(entry) : entry);\n  }, []);\n  return [...new Set(flat)].filter(value => value).sort();\n}"]},"metadata":{},"sourceType":"script"}