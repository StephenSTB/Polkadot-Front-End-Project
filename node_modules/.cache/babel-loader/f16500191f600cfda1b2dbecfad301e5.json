{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nclass MultiAddress extends _Enum.default {\n  constructor(registry, value) {\n    super(registry, {\n      Id: 'AccountId',\n      Index: 'Compact<AccountIndex>',\n      Raw: 'Bytes',\n      // eslint-disable-next-line sort-keys\n      Address32: 'H256',\n      // eslint-disable-next-line sort-keys\n      Address20: 'H160'\n    }, MultiAddress._decodeMultiAddress(value));\n  }\n\n  static _decodeMultiAddress(value) {\n    if ((0, _util.isString)(value)) {\n      try {\n        const u8a = (0, _utilCrypto.decodeAddress)(value.toString());\n        return (0, _util.u8aConcat)(new Uint8Array(u8a.length <= 8 ? 1 : 0), u8a);\n      } catch (error) {// ignore, not a valid ss58 address\n      }\n    }\n\n    return value;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.value.toString();\n  }\n\n}\n\nexports.default = MultiAddress;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/generic/MultiAddress.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_utilCrypto","_Enum","MultiAddress","constructor","registry","Id","Index","Raw","Address32","Address20","_decodeMultiAddress","isString","u8a","decodeAddress","toString","u8aConcat","Uint8Array","length","error"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGN,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIO,WAAW,GAAGP,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIQ,KAAK,GAAGT,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAlC,C,CAEA;AACA;;;AACA,MAAMS,YAAN,SAA2BD,KAAK,CAACH,OAAjC,CAAyC;AACvCK,EAAAA,WAAW,CAACC,QAAD,EAAWP,KAAX,EAAkB;AAC3B,UAAMO,QAAN,EAAgB;AACdC,MAAAA,EAAE,EAAE,WADU;AAEdC,MAAAA,KAAK,EAAE,uBAFO;AAGdC,MAAAA,GAAG,EAAE,OAHS;AAId;AACAC,MAAAA,SAAS,EAAE,MALG;AAMd;AACAC,MAAAA,SAAS,EAAE;AAPG,KAAhB,EAQGP,YAAY,CAACQ,mBAAb,CAAiCb,KAAjC,CARH;AASD;;AAED,SAAOa,mBAAP,CAA2Bb,KAA3B,EAAkC;AAChC,QAAI,CAAC,GAAGE,KAAK,CAACY,QAAV,EAAoBd,KAApB,CAAJ,EAAgC;AAC9B,UAAI;AACF,cAAMe,GAAG,GAAG,CAAC,GAAGZ,WAAW,CAACa,aAAhB,EAA+BhB,KAAK,CAACiB,QAAN,EAA/B,CAAZ;AACA,eAAO,CAAC,GAAGf,KAAK,CAACgB,SAAV,EAAqB,IAAIC,UAAJ,CAAeJ,GAAG,CAACK,MAAJ,IAAc,CAAd,GAAkB,CAAlB,GAAsB,CAArC,CAArB,EAA8DL,GAA9D,CAAP;AACD,OAHD,CAGE,OAAOM,KAAP,EAAc,CAAC;AAChB;AACF;;AAED,WAAOrB,KAAP;AACD;AACD;AACF;AACA;;;AAGEiB,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKjB,KAAL,CAAWiB,QAAX,EAAP;AACD;;AA/BsC;;AAmCzClB,OAAO,CAACE,OAAR,GAAkBI,YAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utilCrypto = require(\"@polkadot/util-crypto\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nclass MultiAddress extends _Enum.default {\n  constructor(registry, value) {\n    super(registry, {\n      Id: 'AccountId',\n      Index: 'Compact<AccountIndex>',\n      Raw: 'Bytes',\n      // eslint-disable-next-line sort-keys\n      Address32: 'H256',\n      // eslint-disable-next-line sort-keys\n      Address20: 'H160'\n    }, MultiAddress._decodeMultiAddress(value));\n  }\n\n  static _decodeMultiAddress(value) {\n    if ((0, _util.isString)(value)) {\n      try {\n        const u8a = (0, _utilCrypto.decodeAddress)(value.toString());\n        return (0, _util.u8aConcat)(new Uint8Array(u8a.length <= 8 ? 1 : 0), u8a);\n      } catch (error) {// ignore, not a valid ss58 address\n      }\n    }\n\n    return value;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.value.toString();\n  }\n\n}\n\nexports.default = MultiAddress;"]},"metadata":{},"sourceType":"script"}