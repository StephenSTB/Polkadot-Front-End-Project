{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._stakerExposure = _stakerExposure;\nexports.stakerExposure = stakerExposure;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction _stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, function (accountId, eras, withActive) {\n    var stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasExposure(eras, withActive).pipe((0, _operators.map)(function (exposures) {\n      return exposures.map(function (_ref) {\n        var era = _ref.era,\n            allNominators = _ref.nominators,\n            allValidators = _ref.validators;\n        var isValidator = !!allValidators[stakerId];\n        var validators = {};\n        var nominating = allNominators[stakerId] || [];\n\n        if (isValidator) {\n          validators[stakerId] = allValidators[stakerId];\n        } else if (nominating) {\n          nominating.forEach(function (_ref2) {\n            var validatorId = _ref2.validatorId;\n            validators[validatorId] = allValidators[validatorId];\n          });\n        }\n\n        return {\n          era: era,\n          isEmpty: !Object.keys(validators).length,\n          isValidator: isValidator,\n          nominating: nominating,\n          validators: validators\n        };\n      });\n    }));\n  });\n}\n\nfunction stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, function (accountId) {\n    var withActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(function (eras) {\n      return api.derive.staking._stakerExposure(accountId, eras, withActive);\n    }));\n  });\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/api-derive/staking/stakerExposure.js"],"names":["Object","defineProperty","exports","value","_stakerExposure","stakerExposure","_operators","require","_util","instanceId","api","memo","accountId","eras","withActive","stakerId","registry","createType","toString","derive","staking","_erasExposure","pipe","map","exposures","era","allNominators","nominators","allValidators","validators","isValidator","nominating","forEach","validatorId","isEmpty","keys","length","erasHistoric","switchMap"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,cAAR,GAAyBA,cAAzB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB,C,CAEA;AACA;;;AACA,SAASH,eAAT,CAAyBK,UAAzB,EAAqCC,GAArC,EAA0C;AACxC,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4B,UAACG,SAAD,EAAYC,IAAZ,EAAkBC,UAAlB,EAAiC;AAClE,QAAMC,QAAQ,GAAGL,GAAG,CAACM,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCL,SAArC,EAAgDM,QAAhD,EAAjB;AACA,WAAOR,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBC,aAAnB,CAAiCR,IAAjC,EAAuCC,UAAvC,EAAmDQ,IAAnD,CAAwD,CAAC,GAAGhB,UAAU,CAACiB,GAAf,EAAoB,UAAAC,SAAS;AAAA,aAAIA,SAAS,CAACD,GAAV,CAAc,gBAIxG;AAAA,YAHJE,GAGI,QAHJA,GAGI;AAAA,YAFQC,aAER,QAFJC,UAEI;AAAA,YADQC,aACR,QADJC,UACI;AACJ,YAAMC,WAAW,GAAG,CAAC,CAACF,aAAa,CAACb,QAAD,CAAnC;AACA,YAAMc,UAAU,GAAG,EAAnB;AACA,YAAME,UAAU,GAAGL,aAAa,CAACX,QAAD,CAAb,IAA2B,EAA9C;;AAEA,YAAIe,WAAJ,EAAiB;AACfD,UAAAA,UAAU,CAACd,QAAD,CAAV,GAAuBa,aAAa,CAACb,QAAD,CAApC;AACD,SAFD,MAEO,IAAIgB,UAAJ,EAAgB;AACrBA,UAAAA,UAAU,CAACC,OAAX,CAAmB,iBAEb;AAAA,gBADJC,WACI,SADJA,WACI;AACJJ,YAAAA,UAAU,CAACI,WAAD,CAAV,GAA0BL,aAAa,CAACK,WAAD,CAAvC;AACD,WAJD;AAKD;;AAED,eAAO;AACLR,UAAAA,GAAG,EAAHA,GADK;AAELS,UAAAA,OAAO,EAAE,CAAClC,MAAM,CAACmC,IAAP,CAAYN,UAAZ,EAAwBO,MAF7B;AAGLN,UAAAA,WAAW,EAAXA,WAHK;AAILC,UAAAA,UAAU,EAAVA,UAJK;AAKLF,UAAAA,UAAU,EAAVA;AALK,SAAP;AAOD,OA1B+F,CAAJ;AAAA,KAA7B,CAAxD,CAAP;AA2BD,GA7BM,CAAP;AA8BD;;AAED,SAASxB,cAAT,CAAwBI,UAAxB,EAAoCC,GAApC,EAAyC;AACvC,SAAO,CAAC,GAAGF,KAAK,CAACG,IAAV,EAAgBF,UAAhB,EAA4B,UAACG,SAAD;AAAA,QAAYE,UAAZ,uEAAyB,KAAzB;AAAA,WAAmCJ,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBiB,YAAnB,CAAgCvB,UAAhC,EAA4CQ,IAA5C,CAAiD,CAAC,GAAGhB,UAAU,CAACgC,SAAf,EAA0B,UAAAzB,IAAI;AAAA,aAAIH,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBhB,eAAnB,CAAmCQ,SAAnC,EAA8CC,IAA9C,EAAoDC,UAApD,CAAJ;AAAA,KAA9B,CAAjD,CAAnC;AAAA,GAA5B,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._stakerExposure = _stakerExposure;\nexports.stakerExposure = stakerExposure;\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction _stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasExposure(eras, withActive).pipe((0, _operators.map)(exposures => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    })));\n  });\n}\n\nfunction stakerExposure(instanceId, api) {\n  return (0, _util.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._stakerExposure(accountId, eras, withActive))));\n}"]},"metadata":{},"sourceType":"script"}