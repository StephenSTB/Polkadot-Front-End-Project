{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateChars = validateChars;\nexports.default = base58Validate;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs58\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction validateChars(type, alphabet, value, startChar) {\n  (0, _util.assert)(value, \"Expected non-null, non-empty \".concat(type, \" input\"));\n  (0, _util.assert)(!startChar || value[0] === startChar, \"Expected \".concat(type, \" to start with '\").concat(startChar || '', \"'\"));\n\n  for (var i = startChar ? 1 : 0; i < value.length; i++) {\n    (0, _util.assert)(alphabet.includes(value[i]), \"Invalid \".concat(type, \" character \\\"\").concat(value[i], \"\\\" (0x\").concat(value.charCodeAt(i).toString(16), \") at index \").concat(i));\n  }\n\n  return true;\n}\n/**\n * @name base58Validate\n * @summary Validates a base58 value.\n * @description\n * Validates the the supplied value is valid base58\n */\n\n\nfunction base58Validate(value) {\n  var ipfsCompat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return validateChars('base58', _bs.BASE58_ALPHABET, value, ipfsCompat ? 'z' : undefined);\n}","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/util-crypto/base58/validate.js"],"names":["Object","defineProperty","exports","value","validateChars","default","base58Validate","_util","require","_bs","type","alphabet","startChar","assert","i","length","includes","charCodeAt","toString","ipfsCompat","BASE58_ALPHABET","undefined"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB,C,CAEA;AACA;;;AACA,SAASJ,aAAT,CAAuBM,IAAvB,EAA6BC,QAA7B,EAAuCR,KAAvC,EAA8CS,SAA9C,EAAyD;AACvD,GAAC,GAAGL,KAAK,CAACM,MAAV,EAAkBV,KAAlB,yCAAyDO,IAAzD;AACA,GAAC,GAAGH,KAAK,CAACM,MAAV,EAAkB,CAACD,SAAD,IAAcT,KAAK,CAAC,CAAD,CAAL,KAAaS,SAA7C,qBAAoEF,IAApE,6BAA2FE,SAAS,IAAI,EAAxG;;AAEA,OAAK,IAAIE,CAAC,GAAGF,SAAS,GAAG,CAAH,GAAO,CAA7B,EAAgCE,CAAC,GAAGX,KAAK,CAACY,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,KAAC,GAAGP,KAAK,CAACM,MAAV,EAAkBF,QAAQ,CAACK,QAAT,CAAkBb,KAAK,CAACW,CAAD,CAAvB,CAAlB,oBAA0DJ,IAA1D,0BAA6EP,KAAK,CAACW,CAAD,CAAlF,mBAA6FX,KAAK,CAACc,UAAN,CAAiBH,CAAjB,EAAoBI,QAApB,CAA6B,EAA7B,CAA7F,wBAA2IJ,CAA3I;AACD;;AAED,SAAO,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASR,cAAT,CAAwBH,KAAxB,EAAmD;AAAA,MAApBgB,UAAoB,uEAAP,KAAO;AACjD,SAAOf,aAAa,CAAC,QAAD,EAAWK,GAAG,CAACW,eAAf,EAAgCjB,KAAhC,EAAuCgB,UAAU,GAAG,GAAH,GAASE,SAA1D,CAApB;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateChars = validateChars;\nexports.default = base58Validate;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs58\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction validateChars(type, alphabet, value, startChar) {\n  (0, _util.assert)(value, `Expected non-null, non-empty ${type} input`);\n  (0, _util.assert)(!startChar || value[0] === startChar, `Expected ${type} to start with '${startChar || ''}'`);\n\n  for (let i = startChar ? 1 : 0; i < value.length; i++) {\n    (0, _util.assert)(alphabet.includes(value[i]), `Invalid ${type} character \"${value[i]}\" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);\n  }\n\n  return true;\n}\n/**\n * @name base58Validate\n * @summary Validates a base58 value.\n * @description\n * Validates the the supplied value is valid base58\n */\n\n\nfunction base58Validate(value, ipfsCompat = false) {\n  return validateChars('base58', _bs.BASE58_ALPHABET, value, ipfsCompat ? 'z' : undefined);\n}"]},"metadata":{},"sourceType":"script"}