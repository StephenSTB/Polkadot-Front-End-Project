{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _slicedToArray = require(\"/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  var output = new Set();\n\n  var _Compact$default$deco = _Compact.default.decodeU8a(u8a),\n      _Compact$default$deco2 = _slicedToArray(_Compact$default$deco, 2),\n      offset = _Compact$default$deco2[0],\n      length = _Compact$default$deco2[1];\n\n  var types = [];\n\n  for (var i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  var values = (0, _utils.decodeU8a)(registry, u8a.subarray(offset), types);\n\n  for (var _i = 0; _i < values.length; _i++) {\n    output.add(values[_i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  var output = new Set();\n  value.forEach(function (val) {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      console.error('Failed to decode BTreeSet key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  var ValClass = (0, _utils.typeToConstructor)(registry, valType);\n\n  if ((0, _util.isHex)(value)) {\n    return decodeSet(registry, ValClass, (0, _util.hexToU8a)(value));\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeSetFromU8a(registry, ValClass, (0, _util.u8aToU8a)(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = (0, _classPrivateFieldLooseKey2.default)(\"ValClass\");\n\nvar BTreeSet = /*#__PURE__*/function (_Set) {\n  _inherits(BTreeSet, _Set);\n\n  var _super = _createSuper(BTreeSet);\n\n  function BTreeSet(registry, valType, rawValue) {\n    var _this;\n\n    _classCallCheck(this, BTreeSet);\n\n    _this = _super.call(this, decodeSet(registry, valType, rawValue));\n    _this.registry = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    _this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(_assertThisInitialized(_this), _ValClass)[_ValClass] = (0, _utils.typeToConstructor)(registry, valType);\n    return _this;\n  }\n\n  _createClass(BTreeSet, [{\n    key: \"eq\",\n\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    value: function eq(other) {\n      return (0, _utils.compareSet)(this, other);\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return (0, _util.u8aToHex)(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      var json = [];\n      this.forEach(function (v) {\n        json.push(v.toHuman(isExtended));\n      });\n      return json;\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = [];\n      this.forEach(function (v) {\n        json.push(v.toJSON());\n      });\n      return json;\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return \"BTreeSet<\".concat(this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType(), \">\");\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this.toJSON());\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      var encoded = new Array();\n\n      if (!isBare) {\n        encoded.push(_Compact.default.encodeU8a(this.size));\n      }\n\n      this.forEach(function (v) {\n        encoded.push(v.toU8a(isBare));\n      });\n      return (0, _util.u8aConcat).apply(void 0, encoded);\n    }\n  }, {\n    key: \"encodedLength\",\n\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get: function get() {\n      var len = _Compact.default.encodeU8a(this.size).length;\n\n      this.forEach(function (v) {\n        len += v.encodedLength;\n      });\n      return len;\n    }\n    /**\n     * @description Returns a hash of the value\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.size === 0;\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(valType) {\n      return /*#__PURE__*/function (_BTreeSet) {\n        _inherits(_class, _BTreeSet);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, valType, value);\n        }\n\n        return _class;\n      }(BTreeSet);\n    }\n  }]);\n\n  return BTreeSet;\n}( /*#__PURE__*/_wrapNativeSuper(Set));\n\nexports.default = BTreeSet;","map":{"version":3,"sources":["/mnt/c/Users/PC/Documents/PolkadotHelloWorld/PolkadotHelloWorld/Front-End-Project1/substrate-node-template/substrate-front-end-template/node_modules/@polkadot/types/codec/BTreeSet.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_Compact","_Raw","_utils","decodeSetFromU8a","registry","ValClass","u8a","output","Set","decodeU8a","offset","length","types","i","toNumber","push","values","subarray","add","decodeSetFromSet","forEach","val","error","console","message","decodeSet","valType","typeToConstructor","isHex","hexToU8a","isU8a","u8aToU8a","Array","isArray","Error","_ValClass","BTreeSet","rawValue","writable","other","compareSet","u8aToHex","toU8a","isExtended","json","v","toHuman","toJSON","getClassName","toRawType","JSON","stringify","isBare","encoded","encodeU8a","size","u8aConcat","len","encodedLength","hash"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Compact = _interopRequireDefault(require(\"./Compact\"));\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _utils = require(\"./utils\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  const output = new Set();\n\n  const [offset, length] = _Compact.default.decodeU8a(u8a);\n\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  const values = (0, _utils.decodeU8a)(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i++) {\n    output.add(values[i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  const output = new Set();\n  value.forEach(val => {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      console.error('Failed to decode BTreeSet key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  const ValClass = (0, _utils.typeToConstructor)(registry, valType);\n\n  if ((0, _util.isHex)(value)) {\n    return decodeSet(registry, ValClass, (0, _util.hexToU8a)(value));\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeSetFromU8a(registry, ValClass, (0, _util.u8aToU8a)(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = (0, _classPrivateFieldLooseKey2.default)(\"ValClass\");\n\nclass BTreeSet extends Set {\n  constructor(registry, valType, rawValue) {\n    super(decodeSet(registry, valType, rawValue));\n    this.registry = void 0;\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _utils.typeToConstructor)(registry, valType);\n  }\n\n  static with(valType) {\n    return class extends BTreeSet {\n      constructor(registry, value) {\n        super(registry, valType, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = _Compact.default.encodeU8a(this.size).length;\n\n    this.forEach(v => {\n      len += v.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareSet)(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toHuman(isExtended));\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toJSON());\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `BTreeSet<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(_Compact.default.encodeU8a(this.size));\n    }\n\n    this.forEach(v => {\n      encoded.push(v.toU8a(isBare));\n    });\n    return (0, _util.u8aConcat)(...encoded);\n  }\n\n}\n\nexports.default = BTreeSet;"]},"metadata":{},"sourceType":"script"}